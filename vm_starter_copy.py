# -*- coding: utf-8 -*-
"""vm-starter-502.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QGBhmv6_4LJwOfURNZEY5Cet2VQJ8nXZ
"""

test = """7	17000
3	17001
2	17002
hola 19000

global_int 2
global_float 1
global_str 0
global_void 0
local_int	 0
local_float 0
local_str	0
temp_int	0
temp_float 2
temp_bool	0
cte_int	3
cte_float	0
cte_str	0

1	gotomain	-1	-1	2
2	= 	17000	-1	1000
3	=	17001	-1	1001
4	/	1000	1001	13000
5	+	13000	17002	13001
6	=	13001	-1	2001
7	print	2001	-1	-1
8	println  -1	-1	-1
9	print	2001	-1	-1
10	print	2001	-1	-1
11	println  -1	-1	-1
12	print	17001	-1	-1
13	println  -1	-1	-1
14  print 19000 -1 -1
15	println  -1	-1	-1
"""


# info sobre los indices de cada region para simular la memoria
regions = { "global_int"	  :	[1000]	,
			"global_float"	  :	[2000]	,
			"global_str"	  :	[3000]	,
			"global_void"	  :	[4000]	,
			"local_int"	  :	[7000]	,
			"local_float" :	[8000]	,
			"local_str"	  :	[9000]	,
			"temp_int"	  :	[12000]	,
			"temp_float"  :	[13000]	,
			"temp_bool"	  :	[14000]	,
			"cte_int"	  :	[17000]	,
			"cte_float"	  :	[18000]	,
			"cte_str"	  :	[19000]	 }

class Cuadruplo:

  operador = -1
  argIzq = -1
  argDer = -1
  res = -1

  def __init__(self, lista):
    self.operador = lista[1]
    self.argIzq = lista[2]
    self.argDer = lista[3]
    self.destino = lista[4]


test_split = test.split('\n')
memo = {}
cuads = [Cuadruplo([-1,-1,-1,-1,-1])]

section = 0

for l in test_split:
    linea = l.split()
    # print(linea)

    if len(linea) == 0:
      section+=1
    elif section == 0 and len(linea) == 2:
        dir = int(linea[1])
        if dir < 18000: #int
          memo[linea[1]] = int(linea[0])
        elif dir < 19000: #float
          memo[linea[1]] = float(linea[0])
        else: #cadena
          memo[linea[1]] = linea[0]
    elif section == 1 and len(linea) == 2:
        pass

    if len(linea) == 5:
      #Seccion de los cuadruplos
      cuads.append(Cuadruplo(linea))

#Ciclo principal para procesar cuadruplos
'''
1	gotomain	-1	-1	2
2	= 	17000	-1	1000
3	=	17001	-1	1001
4	/	1000	1001	13000
5	+	13000	17002	13001
6	=	13001	-1	2001
7	print	2001	-1	-1
8	println  -1	-1	-1
'''

indx = 1

while indx < len(cuads):
  if cuads[indx].operador == 'gotomain':
    indx = int(cuads[indx].destino)
  elif cuads[indx].operador == '=':
    # 2	= 	17000	-1	1000
    # memo[1000] = memo[1700]
    memo[cuads[indx].destino] = memo[cuads[indx].argIzq]
    indx += 1
  elif cuads[indx].operador == '/':
    # 13000 = 1000 / 1001
    memo[cuads[indx].destino] = memo[cuads[indx].argIzq] / memo[cuads[indx].argDer]
    indx += 1
  elif cuads[indx].operador == '+':
    # 13001 = 17002 + 13000
    memo[cuads[indx].destino] = memo[cuads[indx].argIzq] + memo[cuads[indx].argDer]
    indx += 1
  elif cuads[indx].operador == '*':
    memo[cuads[indx].destino] = memo[cuads[indx].argIzq] * memo[cuads[indx].argDer]
    indx += 1
  elif cuads[indx].operador == '-':
    memo[cuads[indx].destino] = memo[cuads[indx].argIzq] - memo[cuads[indx].argDer]
    indx += 1
  elif cuads[indx].operador == 'print':
    print(memo[cuads[indx].argIzq], end=" ")
    indx += 1
  elif cuads[indx].operador == 'println':
    print()
    indx += 1