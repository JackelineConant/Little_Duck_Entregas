
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'program( ) * + , - / : ; < = > CONST_FLOAT CONST_INT CONST_STRING DO ELSE END EQ FLOAT FOR GE ID IF INT LE MAIN NE PRINT PROGRAM STRING THEN VAR VOID WHILE [ ] { }save_gotoF :empty :type : INTtype : FLOATvars : VAR var_ayudavar_ayuda : ID var_doble_ayuda ":" type ";" var_ayuda_tailvar_ayuda_tail : var_ayudavar_ayuda_tail : emptyvar_doble_ayuda : "," ID var_doble_ayudavar_doble_ayuda : emptyexp : exp "+" terminoexp : exp "-" terminoexp : terminoexpression : exp ">" expexpression : exp "<" expexpression : exp EQ expexpression : exp GE expexpression : exp LE expexpression : exp NE expexpression : expfactor : "(" expression ")"factor : IDfactor : ctefactor : "+" IDfactor : "-" IDfactor : "+" ctefactor : "-" cteprint : PRINT "(" expression print_ayuda ")" ";"print : PRINT "(" CONST_STRING print_ayuda ")" ";"print_ayuda : "," expression print_ayudaprint_ayuda : "," STRING print_ayudaprint_ayuda : emptytermino : termino "*" factortermino : termino "/" factortermino : factorcycle : DO body WHILE "(" expression ")" ";"condition : IF "(" expression marca ")" body ";"marca :condition : IF "(" expression ")" save_gotof body save_goto_else ELSE body ";"save_gotof :save_goto_else :assign : ID "=" expression ";"f_call : ID "(" expression f_call_ayuda ")" ";"f_call : ID "(" ")" ";"f_call_ayuda : "," expression f_call_ayudaf_call_ayuda : emptystatements : statements statementstatements : statementstatement : assignstatement : conditionstatement : cyclestatement : f_callstatement : printbody : "{" statements "}"cte : CONST_INTcte : CONST_FLOATfuncs : VOID ID "(" ID ":" type funcs_ayuda ")" "[" vars body "]" ";"funcs : VOID ID "(" ")" "[" vars body "]" ";"funcs : VOID ID "(" ID ":" type funcs_ayuda ")" "[" body "]" ";"funcs : VOID ID "(" ")" "[" body "]" ";"funcs : funcs funcsfuncs : emptyfuncs_ayuda : "," ID ":" type funcs_ayudafuncs_ayuda : emptyprogram : PROGRAM ID ";" vars funcs MAIN body END'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,23,],[0,-65,]),'ID':([2,6,8,16,19,20,24,25,26,27,28,29,30,42,43,44,45,47,50,54,56,58,74,75,76,77,78,79,80,81,82,85,86,91,93,96,98,102,130,135,138,142,144,155,],[3,11,14,22,31,35,31,-48,-49,-50,-51,-52,-53,-47,51,51,51,51,11,83,87,51,-42,51,51,51,51,51,51,51,51,51,51,51,-44,51,51,127,-43,-28,-29,-37,-36,-39,]),';':([3,37,38,39,41,51,52,53,55,57,59,60,61,63,83,84,87,88,105,106,107,108,109,110,111,112,113,114,115,116,117,122,125,128,132,134,150,152,153,],[4,50,-3,-4,-54,-22,74,-20,-13,-35,-23,-55,-56,93,-24,-26,-25,-27,129,-14,-15,-16,-17,-18,-19,-11,-12,-33,-34,-21,130,135,138,141,142,144,154,155,156,]),'VAR':([4,49,139,],[6,6,6,]),'VOID':([5,7,9,10,12,50,71,72,73,129,141,154,156,],[8,8,-62,-5,8,-2,-6,-7,-8,-60,-58,-59,-57,]),'MAIN':([5,7,9,10,12,50,71,72,73,129,141,154,156,],[-2,13,-62,-5,-2,-2,-6,-7,-8,-60,-58,-59,-57,]),'{':([10,13,33,49,50,69,71,72,73,95,119,120,139,145,148,],[-5,19,19,19,-2,19,-6,-7,-8,-40,19,19,19,19,19,]),',':([11,22,38,39,51,53,55,57,59,60,61,62,66,67,68,83,84,87,88,106,107,108,109,110,111,112,113,114,115,116,118,123,124,147,],[16,16,-3,-4,-22,-20,-13,-35,-23,-55,-56,91,98,98,102,-24,-26,-25,-27,-14,-15,-16,-17,-18,-19,-11,-12,-33,-34,-21,91,98,98,102,]),':':([11,15,17,22,35,40,127,],[-2,21,-10,-2,48,-9,140,]),'(':([14,31,32,34,43,44,45,47,58,65,75,76,77,78,79,80,81,82,85,86,91,96,98,],[20,44,45,47,58,58,58,58,58,96,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'END':([18,41,],[23,-54,]),'IF':([19,24,25,26,27,28,29,30,42,74,93,130,135,138,142,144,155,],[32,32,-48,-49,-50,-51,-52,-53,-47,-42,-44,-43,-28,-29,-37,-36,-39,]),'DO':([19,24,25,26,27,28,29,30,42,74,93,130,135,138,142,144,155,],[33,33,-48,-49,-50,-51,-52,-53,-47,-42,-44,-43,-28,-29,-37,-36,-39,]),'PRINT':([19,24,25,26,27,28,29,30,42,74,93,130,135,138,142,144,155,],[34,34,-48,-49,-50,-51,-52,-53,-47,-42,-44,-43,-28,-29,-37,-36,-39,]),')':([20,38,39,44,51,53,55,57,59,60,61,62,64,66,67,68,83,84,87,88,89,90,92,94,97,99,100,101,103,106,107,108,109,110,111,112,113,114,115,116,118,121,123,124,131,136,137,147,151,],[36,-3,-4,63,-22,-20,-13,-35,-23,-55,-56,-2,95,-2,-2,-2,-24,-26,-25,-27,116,117,-46,119,122,-32,125,126,-64,-14,-15,-16,-17,-18,-19,-11,-12,-33,-34,-21,-2,134,-2,-2,-45,-30,-31,-2,-63,]),'INT':([21,48,140,],[38,38,38,]),'FLOAT':([21,48,140,],[39,39,39,]),'}':([24,25,26,27,28,29,30,42,74,93,130,135,138,142,144,155,],[41,-48,-49,-50,-51,-52,-53,-47,-42,-44,-43,-28,-29,-37,-36,-39,]),'=':([31,],[43,]),'[':([36,126,],[49,139,]),'WHILE':([41,46,],[-54,65,]),']':([41,70,104,146,149,],[-54,105,128,150,153,]),'ELSE':([41,133,143,],[-54,-41,148,]),'+':([43,44,45,47,51,53,55,57,58,59,60,61,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,96,98,106,107,108,109,110,111,112,113,114,115,116,],[54,54,54,54,-22,81,-13,-35,54,-23,-55,-56,54,54,54,54,54,54,54,54,-24,-26,54,54,-25,-27,54,54,54,81,81,81,81,81,81,-11,-12,-33,-34,-21,]),'-':([43,44,45,47,51,53,55,57,58,59,60,61,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,96,98,106,107,108,109,110,111,112,113,114,115,116,],[56,56,56,56,-22,82,-13,-35,56,-23,-55,-56,56,56,56,56,56,56,56,56,-24,-26,56,56,-25,-27,56,56,56,82,82,82,82,82,82,-11,-12,-33,-34,-21,]),'CONST_INT':([43,44,45,47,54,56,58,75,76,77,78,79,80,81,82,85,86,91,96,98,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'CONST_FLOAT':([43,44,45,47,54,56,58,75,76,77,78,79,80,81,82,85,86,91,96,98,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'CONST_STRING':([47,],[67,]),'*':([51,55,57,59,60,61,83,84,87,88,112,113,114,115,116,],[-22,85,-35,-23,-55,-56,-24,-26,-25,-27,85,85,-33,-34,-21,]),'/':([51,55,57,59,60,61,83,84,87,88,112,113,114,115,116,],[-22,86,-35,-23,-55,-56,-24,-26,-25,-27,86,86,-33,-34,-21,]),'>':([51,53,55,57,59,60,61,83,84,87,88,112,113,114,115,116,],[-22,75,-13,-35,-23,-55,-56,-24,-26,-25,-27,-11,-12,-33,-34,-21,]),'<':([51,53,55,57,59,60,61,83,84,87,88,112,113,114,115,116,],[-22,76,-13,-35,-23,-55,-56,-24,-26,-25,-27,-11,-12,-33,-34,-21,]),'EQ':([51,53,55,57,59,60,61,83,84,87,88,112,113,114,115,116,],[-22,77,-13,-35,-23,-55,-56,-24,-26,-25,-27,-11,-12,-33,-34,-21,]),'GE':([51,53,55,57,59,60,61,83,84,87,88,112,113,114,115,116,],[-22,78,-13,-35,-23,-55,-56,-24,-26,-25,-27,-11,-12,-33,-34,-21,]),'LE':([51,53,55,57,59,60,61,83,84,87,88,112,113,114,115,116,],[-22,79,-13,-35,-23,-55,-56,-24,-26,-25,-27,-11,-12,-33,-34,-21,]),'NE':([51,53,55,57,59,60,61,83,84,87,88,112,113,114,115,116,],[-22,80,-13,-35,-23,-55,-56,-24,-26,-25,-27,-11,-12,-33,-34,-21,]),'STRING':([98,],[124,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,49,139,],[5,69,145,]),'funcs':([5,7,12,],[7,12,12,]),'empty':([5,7,11,12,22,50,62,66,67,68,118,123,124,147,],[9,9,17,9,17,73,92,99,99,103,92,99,99,103,]),'var_ayuda':([6,50,],[10,72,]),'var_doble_ayuda':([11,22,],[15,40,]),'body':([13,33,49,69,119,120,139,145,148,],[18,46,70,104,132,133,146,149,152,]),'statements':([19,],[24,]),'statement':([19,24,],[25,42,]),'assign':([19,24,],[26,26,]),'condition':([19,24,],[27,27,]),'cycle':([19,24,],[28,28,]),'f_call':([19,24,],[29,29,]),'print':([19,24,],[30,30,]),'type':([21,48,140,],[37,68,147,]),'expression':([43,44,45,47,58,91,96,98,],[52,62,64,66,89,118,121,123,]),'exp':([43,44,45,47,58,75,76,77,78,79,80,91,96,98,],[53,53,53,53,53,106,107,108,109,110,111,53,53,53,]),'termino':([43,44,45,47,58,75,76,77,78,79,80,81,82,91,96,98,],[55,55,55,55,55,55,55,55,55,55,55,112,113,55,55,55,]),'factor':([43,44,45,47,58,75,76,77,78,79,80,81,82,85,86,91,96,98,],[57,57,57,57,57,57,57,57,57,57,57,57,57,114,115,57,57,57,]),'cte':([43,44,45,47,54,56,58,75,76,77,78,79,80,81,82,85,86,91,96,98,],[59,59,59,59,84,88,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'var_ayuda_tail':([50,],[71,]),'f_call_ayuda':([62,118,],[90,131,]),'marca':([64,],[94,]),'print_ayuda':([66,67,123,124,],[97,100,136,137,]),'funcs_ayuda':([68,147,],[101,151,]),'save_gotof':([95,],[120,]),'save_goto_else':([133,],[143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('save_gotoF -> <empty>','save_gotoF',0,'p_save_gotoF','parser.py',141),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',152),
  ('type -> INT','type',1,'p_type_int','parser.py',157),
  ('type -> FLOAT','type',1,'p_type_float','parser.py',161),
  ('vars -> VAR var_ayuda','vars',2,'p_vars','parser.py',166),
  ('var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail','var_ayuda',6,'p_var_ayuda','parser.py',170),
  ('var_ayuda_tail -> var_ayuda','var_ayuda_tail',1,'p_var_ayuda_tail','parser.py',174),
  ('var_ayuda_tail -> empty','var_ayuda_tail',1,'p_var_ayuda_tail_empty','parser.py',178),
  ('var_doble_ayuda -> , ID var_doble_ayuda','var_doble_ayuda',3,'p_var_doble_ayuda','parser.py',182),
  ('var_doble_ayuda -> empty','var_doble_ayuda',1,'p_var_doble_ayuda_empty','parser.py',186),
  ('exp -> exp + termino','exp',3,'p_exp_add','parser.py',191),
  ('exp -> exp - termino','exp',3,'p_exp_sub','parser.py',199),
  ('exp -> termino','exp',1,'p_exp_term','parser.py',206),
  ('expression -> exp > exp','expression',3,'p_expression_gt','parser.py',211),
  ('expression -> exp < exp','expression',3,'p_expression_lt','parser.py',220),
  ('expression -> exp EQ exp','expression',3,'p_expression_eq','parser.py',229),
  ('expression -> exp GE exp','expression',3,'p_expression_ge','parser.py',237),
  ('expression -> exp LE exp','expression',3,'p_expression_le','parser.py',245),
  ('expression -> exp NE exp','expression',3,'p_expression_ne','parser.py',253),
  ('expression -> exp','expression',1,'p_expression_exp','parser.py',261),
  ('factor -> ( expression )','factor',3,'p_factor_group','parser.py',266),
  ('factor -> ID','factor',1,'p_factor_id','parser.py',270),
  ('factor -> cte','factor',1,'p_factor_cte','parser.py',278),
  ('factor -> + ID','factor',2,'p_factor_pos_id','parser.py',282),
  ('factor -> - ID','factor',2,'p_factor_neg_id','parser.py',286),
  ('factor -> + cte','factor',2,'p_factor_pos_cte','parser.py',290),
  ('factor -> - cte','factor',2,'p_factor_neg_cte','parser.py',294),
  ('print -> PRINT ( expression print_ayuda ) ;','print',6,'p_print_expr','parser.py',300),
  ('print -> PRINT ( CONST_STRING print_ayuda ) ;','print',6,'p_print_string','parser.py',304),
  ('print_ayuda -> , expression print_ayuda','print_ayuda',3,'p_print_ayuda_expr','parser.py',308),
  ('print_ayuda -> , STRING print_ayuda','print_ayuda',3,'p_print_ayuda_string','parser.py',312),
  ('print_ayuda -> empty','print_ayuda',1,'p_print_ayuda_empty','parser.py',316),
  ('termino -> termino * factor','termino',3,'p_termino_mul','parser.py',320),
  ('termino -> termino / factor','termino',3,'p_termino_div','parser.py',327),
  ('termino -> factor','termino',1,'p_termino_factor','parser.py',334),
  ('cycle -> DO body WHILE ( expression ) ;','cycle',7,'p_cycle','parser.py',340),
  ('condition -> IF ( expression marca ) body ;','condition',7,'p_condition_if','parser.py',345),
  ('marca -> <empty>','marca',0,'p_marca','parser.py',350),
  ('condition -> IF ( expression ) save_gotof body save_goto_else ELSE body ;','condition',10,'p_condition_if_else','parser.py',356),
  ('save_gotof -> <empty>','save_gotof',0,'p_save_gotof','parser.py',361),
  ('save_goto_else -> <empty>','save_goto_else',0,'p_save_goto_else','parser.py',365),
  ('assign -> ID = expression ;','assign',4,'p_assign','parser.py',391),
  ('f_call -> ID ( expression f_call_ayuda ) ;','f_call',6,'p_f_call_args','parser.py',401),
  ('f_call -> ID ( ) ;','f_call',4,'p_f_call_no_args','parser.py',406),
  ('f_call_ayuda -> , expression f_call_ayuda','f_call_ayuda',3,'p_f_call_ayuda','parser.py',410),
  ('f_call_ayuda -> empty','f_call_ayuda',1,'p_f_call_ayuda_empty','parser.py',414),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',419),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',423),
  ('statement -> assign','statement',1,'p_statement_assign','parser.py',427),
  ('statement -> condition','statement',1,'p_statement_condition','parser.py',431),
  ('statement -> cycle','statement',1,'p_statement_cycle','parser.py',435),
  ('statement -> f_call','statement',1,'p_statement_f_call','parser.py',439),
  ('statement -> print','statement',1,'p_statement_print','parser.py',443),
  ('body -> { statements }','body',3,'p_body','parser.py',448),
  ('cte -> CONST_INT','cte',1,'p_cte_int','parser.py',454),
  ('cte -> CONST_FLOAT','cte',1,'p_cte_float','parser.py',459),
  ('funcs -> VOID ID ( ID : type funcs_ayuda ) [ vars body ] ;','funcs',13,'p_funcs_params','parser.py',465),
  ('funcs -> VOID ID ( ) [ vars body ] ;','funcs',9,'p_funcs_empty_params','parser.py',469),
  ('funcs -> VOID ID ( ID : type funcs_ayuda ) [ body ] ;','funcs',12,'p_funcs_params_no_vars','parser.py',473),
  ('funcs -> VOID ID ( ) [ body ] ;','funcs',8,'p_funcs_empty_params_no_vars','parser.py',477),
  ('funcs -> funcs funcs','funcs',2,'p_funcs_multiple','parser.py',481),
  ('funcs -> empty','funcs',1,'p_funcs_empty','parser.py',485),
  ('funcs_ayuda -> , ID : type funcs_ayuda','funcs_ayuda',5,'p_funcs_ayuda','parser.py',489),
  ('funcs_ayuda -> empty','funcs_ayuda',1,'p_funcs_ayuda_empty','parser.py',493),
  ('program -> PROGRAM ID ; vars funcs MAIN body END','program',8,'p_program','parser.py',499),
]
