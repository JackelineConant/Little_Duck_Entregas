
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = '( ) * + , - / : ; < = > CONST_FLOAT CONST_INT CONST_STRING DO ELSE END EQ FLOAT FOR GE ID IF INT LE MAIN NE PRINT PROGRAM STRING THEN VAR VOID WHILE [ ] { }vars : vars VAR var_ayudavars : VAR var_ayudavar_ayuda : ID var_doble_ayuda ":" type ";" var_ayuda_tailvar_ayuda_tail : var_ayudavar_ayuda_tail :var_doble_ayuda : "," ID var_doble_ayudavar_doble_ayuda :type : INTtype : FLOATbody : "{" statements "}"statements : statements statementstatements : statementstatement : assignstatement : conditionstatement : cyclestatement : f_callstatement : printprint : PRINT "(" expression print_ayuda ")" ";"print : PRINT "(" STRING print_ayuda ")" ";"print_ayuda : "," expression print_ayudaprint_ayuda : "," STRING print_ayudaprint_ayuda :cycle : DO body WHILE "(" expression ")" ";"condition : IF "(" expression ")" body ";"condition : IF "(" expression ")" body ELSE body ";"assign : ID "=" expression ";"expression : exp ">" expexpression : exp "<" expexpression : exp EQ expexpression : exp GE expexpression : exp LE expexpression : exp NE expexpression : expexp : exp "+" terminoexp : exp "-" terminoexp : terminotermino : termino "*" factortermino : termino "/" factortermino : factorfactor : "(" expression ")"factor : IDfactor : "+" IDfactor : "-" IDfactor : "+" ctefactor : "-" ctecte : INTcte : FLOATfuncs : VOID ID "(" ID ":" type funcs_ayuda ")" "[" vars body "]" ";"funcs : VOID ID "(" ")" "[" vars body "]" ";"funcs : VOID ID "(" ID ":" type funcs_ayuda ")" "[" body "]" ";"funcs : VOID ID "(" ")" "[" body "]" ";"funcs : funcs funcsfuncs :funcs_ayuda : "," ID ":" type funcs_ayudafuncs_ayuda :f_call : ID "(" expression f_call_ayuda ")" ";"f_call : ID "(" ")" ";"f_call_ayuda : "," expression f_call_ayudaf_call_ayuda :program : PROGRAM ID ";" vars funcs MAIN body END'
    
_lr_action_items = {'VAR':([0,1,4,6,15,16,17,],[2,3,-2,-1,-5,-3,-4,]),'$end':([1,4,6,15,16,17,],[0,-2,-1,-5,-3,-4,]),'ID':([2,3,8,15,],[5,5,10,5,]),',':([5,10,],[8,8,]),':':([5,7,10,14,],[-7,9,-7,-6,]),'INT':([9,],[12,]),'FLOAT':([9,],[13,]),';':([11,12,13,],[15,-8,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'vars':([0,],[1,]),'var_ayuda':([2,3,15,],[4,6,17,]),'var_doble_ayuda':([5,10,],[7,14,]),'type':([9,],[11,]),'var_ayuda_tail':([15,],[16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> vars","S'",1,None,None,None),
  ('vars -> vars VAR var_ayuda','vars',3,'p_vars_multiple','parser.py',23),
  ('vars -> VAR var_ayuda','vars',2,'p_vars_single','parser.py',27),
  ('var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail','var_ayuda',6,'p_var_ayuda','parser.py',31),
  ('var_ayuda_tail -> var_ayuda','var_ayuda_tail',1,'p_var_ayuda_tail','parser.py',35),
  ('var_ayuda_tail -> <empty>','var_ayuda_tail',0,'p_var_ayuda_tail_empty','parser.py',39),
  ('var_doble_ayuda -> , ID var_doble_ayuda','var_doble_ayuda',3,'p_var_doble_ayuda','parser.py',43),
  ('var_doble_ayuda -> <empty>','var_doble_ayuda',0,'p_var_doble_ayuda_empty','parser.py',47),
  ('type -> INT','type',1,'p_type_int','parser.py',52),
  ('type -> FLOAT','type',1,'p_type_float','parser.py',56),
  ('body -> { statements }','body',3,'p_body','parser.py',61),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',66),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',70),
  ('statement -> assign','statement',1,'p_statement_assign','parser.py',74),
  ('statement -> condition','statement',1,'p_statement_condition','parser.py',78),
  ('statement -> cycle','statement',1,'p_statement_cycle','parser.py',82),
  ('statement -> f_call','statement',1,'p_statement_f_call','parser.py',86),
  ('statement -> print','statement',1,'p_statement_print','parser.py',90),
  ('print -> PRINT ( expression print_ayuda ) ;','print',6,'p_print_expr','parser.py',95),
  ('print -> PRINT ( STRING print_ayuda ) ;','print',6,'p_print_string','parser.py',99),
  ('print_ayuda -> , expression print_ayuda','print_ayuda',3,'p_print_ayuda_expr','parser.py',103),
  ('print_ayuda -> , STRING print_ayuda','print_ayuda',3,'p_print_ayuda_string','parser.py',107),
  ('print_ayuda -> <empty>','print_ayuda',0,'p_print_ayuda_empty','parser.py',111),
  ('cycle -> DO body WHILE ( expression ) ;','cycle',7,'p_cycle','parser.py',116),
  ('condition -> IF ( expression ) body ;','condition',6,'p_condition_if','parser.py',121),
  ('condition -> IF ( expression ) body ELSE body ;','condition',8,'p_condition_if_else','parser.py',125),
  ('assign -> ID = expression ;','assign',4,'p_assign','parser.py',130),
  ('expression -> exp > exp','expression',3,'p_expression_gt','parser.py',135),
  ('expression -> exp < exp','expression',3,'p_expression_lt','parser.py',139),
  ('expression -> exp EQ exp','expression',3,'p_expression_eq','parser.py',143),
  ('expression -> exp GE exp','expression',3,'p_expression_ge','parser.py',147),
  ('expression -> exp LE exp','expression',3,'p_expression_le','parser.py',151),
  ('expression -> exp NE exp','expression',3,'p_expression_ne','parser.py',155),
  ('expression -> exp','expression',1,'p_expression_exp','parser.py',159),
  ('exp -> exp + termino','exp',3,'p_exp_add','parser.py',164),
  ('exp -> exp - termino','exp',3,'p_exp_sub','parser.py',168),
  ('exp -> termino','exp',1,'p_exp_term','parser.py',172),
  ('termino -> termino * factor','termino',3,'p_termino_mul','parser.py',176),
  ('termino -> termino / factor','termino',3,'p_termino_div','parser.py',180),
  ('termino -> factor','termino',1,'p_termino_factor','parser.py',184),
  ('factor -> ( expression )','factor',3,'p_factor_group','parser.py',189),
  ('factor -> ID','factor',1,'p_factor_id','parser.py',193),
  ('factor -> + ID','factor',2,'p_factor_pos_id','parser.py',197),
  ('factor -> - ID','factor',2,'p_factor_neg_id','parser.py',201),
  ('factor -> + cte','factor',2,'p_factor_pos_cte','parser.py',205),
  ('factor -> - cte','factor',2,'p_factor_neg_cte','parser.py',209),
  ('cte -> INT','cte',1,'p_cte_int','parser.py',214),
  ('cte -> FLOAT','cte',1,'p_cte_float','parser.py',218),
  ('funcs -> VOID ID ( ID : type funcs_ayuda ) [ vars body ] ;','funcs',13,'p_funcs_params','parser.py',223),
  ('funcs -> VOID ID ( ) [ vars body ] ;','funcs',9,'p_funcs_empty_params','parser.py',227),
  ('funcs -> VOID ID ( ID : type funcs_ayuda ) [ body ] ;','funcs',12,'p_funcs_params_no_vars','parser.py',231),
  ('funcs -> VOID ID ( ) [ body ] ;','funcs',8,'p_funcs_empty_params_no_vars','parser.py',235),
  ('funcs -> funcs funcs','funcs',2,'p_funcs_multiple','parser.py',239),
  ('funcs -> <empty>','funcs',0,'p_funcs_empty','parser.py',243),
  ('funcs_ayuda -> , ID : type funcs_ayuda','funcs_ayuda',5,'p_funcs_ayuda','parser.py',247),
  ('funcs_ayuda -> <empty>','funcs_ayuda',0,'p_funcs_ayuda_empty','parser.py',251),
  ('f_call -> ID ( expression f_call_ayuda ) ;','f_call',6,'p_f_call_args','parser.py',256),
  ('f_call -> ID ( ) ;','f_call',4,'p_f_call_no_args','parser.py',260),
  ('f_call_ayuda -> , expression f_call_ayuda','f_call_ayuda',3,'p_f_call_ayuda','parser.py',264),
  ('f_call_ayuda -> <empty>','f_call_ayuda',0,'p_f_call_ayuda_empty','parser.py',268),
  ('program -> PROGRAM ID ; vars funcs MAIN body END','program',8,'p_program','parser.py',273),
]
