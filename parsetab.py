
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'program( ) * + , - / : ; < = > CONST_FLOAT CONST_INT CONST_STRING DO ELSE END EQ FLOAT FOR GE ID IF INT LE MAIN NE PRINT PROGRAM STRING THEN VAR VOID WHILE [ ] { }empty :type : INTtype : FLOATvars : VAR var_ayudavar_ayuda : ID var_doble_ayuda ":" type ";" var_ayuda_tailvar_ayuda_tail : var_ayudavar_ayuda_tail : emptyvar_doble_ayuda : "," ID var_doble_ayudavar_doble_ayuda : emptyexp : exp "+" terminoexp : exp "-" terminoexp : terminoexpression : exp ">" expexpression : exp "<" expexpression : exp EQ expexpression : exp GE expexpression : exp LE expexpression : exp NE expexpression : expfactor : "(" expression ")"factor : IDfactor : ctefactor : "+" IDfactor : "-" IDfactor : "+" ctefactor : "-" cteprint : PRINT "(" expression print_ayuda ")" ";"print : PRINT "(" CONST_STRING print_ayuda ")" ";"print_ayuda : "," expression print_ayudaprint_ayuda : "," STRING print_ayudaprint_ayuda : emptytermino : termino "*" factortermino : termino "/" factortermino : factorcycle : DO body WHILE "(" expression ")" ";"condition : IF "(" expression ")" body ";"condition : IF "(" expression ")" body ELSE body ";"assign : ID "=" expression ";"f_call : ID "(" expression f_call_ayuda ")" ";"f_call : ID "(" ")" ";"f_call_ayuda : "," expression f_call_ayudaf_call_ayuda : emptystatements : statements statementstatements : statementstatement : assignstatement : conditionstatement : cyclestatement : f_callstatement : printbody : "{" statements "}"cte : CONST_INTcte : CONST_FLOATfuncs : VOID ID "(" ID ":" type funcs_ayuda ")" "[" vars body "]" ";"funcs : VOID ID "(" ")" "[" vars body "]" ";"funcs : VOID ID "(" ID ":" type funcs_ayuda ")" "[" body "]" ";"funcs : VOID ID "(" ")" "[" body "]" ";"funcs : funcs funcsfuncs : emptyfuncs_ayuda : "," ID ":" type funcs_ayudafuncs_ayuda : emptyprogram : PROGRAM ID ";" vars funcs MAIN body END'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,23,],[0,-61,]),'ID':([2,6,8,16,19,20,24,25,26,27,28,29,30,42,43,44,45,47,50,54,56,58,74,75,76,77,78,79,80,81,82,85,86,91,93,95,97,101,128,130,133,136,141,145,],[3,11,14,22,31,35,31,-44,-45,-46,-47,-48,-49,-43,51,51,51,51,11,83,87,51,-38,51,51,51,51,51,51,51,51,51,51,51,-40,51,51,125,-39,-36,-27,-28,-35,-37,]),';':([3,37,38,39,41,51,52,53,55,57,59,60,61,63,83,84,87,88,104,105,106,107,108,109,110,111,112,113,114,115,116,118,120,123,126,132,140,147,149,],[4,50,-2,-3,-50,-21,74,-19,-12,-34,-22,-51,-52,93,-23,-25,-24,-26,127,-13,-14,-15,-16,-17,-18,-10,-11,-32,-33,-20,128,130,133,136,139,141,145,150,151,]),'VAR':([4,49,137,],[6,6,6,]),'VOID':([5,7,9,10,12,50,71,72,73,127,139,150,151,],[8,8,-58,-4,8,-1,-5,-6,-7,-56,-54,-55,-53,]),'MAIN':([5,7,9,10,12,50,71,72,73,127,139,150,151,],[-1,13,-58,-4,-1,-1,-5,-6,-7,-56,-54,-55,-53,]),'{':([10,13,33,49,50,69,71,72,73,94,131,137,142,],[-4,19,19,19,-1,19,-5,-6,-7,19,19,19,19,]),',':([11,22,38,39,51,53,55,57,59,60,61,62,66,67,68,83,84,87,88,105,106,107,108,109,110,111,112,113,114,115,117,121,122,144,],[16,16,-2,-3,-21,-19,-12,-34,-22,-51,-52,91,97,97,101,-23,-25,-24,-26,-13,-14,-15,-16,-17,-18,-10,-11,-32,-33,-20,91,97,97,101,]),':':([11,15,17,22,35,40,125,],[-1,21,-9,-1,48,-8,138,]),'(':([14,31,32,34,43,44,45,47,58,65,75,76,77,78,79,80,81,82,85,86,91,95,97,],[20,44,45,47,58,58,58,58,58,95,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'END':([18,41,],[23,-50,]),'IF':([19,24,25,26,27,28,29,30,42,74,93,128,130,133,136,141,145,],[32,32,-44,-45,-46,-47,-48,-49,-43,-38,-40,-39,-36,-27,-28,-35,-37,]),'DO':([19,24,25,26,27,28,29,30,42,74,93,128,130,133,136,141,145,],[33,33,-44,-45,-46,-47,-48,-49,-43,-38,-40,-39,-36,-27,-28,-35,-37,]),'PRINT':([19,24,25,26,27,28,29,30,42,74,93,128,130,133,136,141,145,],[34,34,-44,-45,-46,-47,-48,-49,-43,-38,-40,-39,-36,-27,-28,-35,-37,]),')':([20,38,39,44,51,53,55,57,59,60,61,62,64,66,67,68,83,84,87,88,89,90,92,96,98,99,100,102,105,106,107,108,109,110,111,112,113,114,115,117,119,121,122,129,134,135,144,148,],[36,-2,-3,63,-21,-19,-12,-34,-22,-51,-52,-1,94,-1,-1,-1,-23,-25,-24,-26,115,116,-42,120,-31,123,124,-60,-13,-14,-15,-16,-17,-18,-10,-11,-32,-33,-20,-1,132,-1,-1,-41,-29,-30,-1,-59,]),'INT':([21,48,138,],[38,38,38,]),'FLOAT':([21,48,138,],[39,39,39,]),'}':([24,25,26,27,28,29,30,42,74,93,128,130,133,136,141,145,],[41,-44,-45,-46,-47,-48,-49,-43,-38,-40,-39,-36,-27,-28,-35,-37,]),'=':([31,],[43,]),'[':([36,124,],[49,137,]),'WHILE':([41,46,],[-50,65,]),']':([41,70,103,143,146,],[-50,104,126,147,149,]),'ELSE':([41,118,],[-50,131,]),'+':([43,44,45,47,51,53,55,57,58,59,60,61,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,95,97,105,106,107,108,109,110,111,112,113,114,115,],[54,54,54,54,-21,81,-12,-34,54,-22,-51,-52,54,54,54,54,54,54,54,54,-23,-25,54,54,-24,-26,54,54,54,81,81,81,81,81,81,-10,-11,-32,-33,-20,]),'-':([43,44,45,47,51,53,55,57,58,59,60,61,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,95,97,105,106,107,108,109,110,111,112,113,114,115,],[56,56,56,56,-21,82,-12,-34,56,-22,-51,-52,56,56,56,56,56,56,56,56,-23,-25,56,56,-24,-26,56,56,56,82,82,82,82,82,82,-10,-11,-32,-33,-20,]),'CONST_INT':([43,44,45,47,54,56,58,75,76,77,78,79,80,81,82,85,86,91,95,97,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'CONST_FLOAT':([43,44,45,47,54,56,58,75,76,77,78,79,80,81,82,85,86,91,95,97,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'CONST_STRING':([47,],[67,]),'*':([51,55,57,59,60,61,83,84,87,88,111,112,113,114,115,],[-21,85,-34,-22,-51,-52,-23,-25,-24,-26,85,85,-32,-33,-20,]),'/':([51,55,57,59,60,61,83,84,87,88,111,112,113,114,115,],[-21,86,-34,-22,-51,-52,-23,-25,-24,-26,86,86,-32,-33,-20,]),'>':([51,53,55,57,59,60,61,83,84,87,88,111,112,113,114,115,],[-21,75,-12,-34,-22,-51,-52,-23,-25,-24,-26,-10,-11,-32,-33,-20,]),'<':([51,53,55,57,59,60,61,83,84,87,88,111,112,113,114,115,],[-21,76,-12,-34,-22,-51,-52,-23,-25,-24,-26,-10,-11,-32,-33,-20,]),'EQ':([51,53,55,57,59,60,61,83,84,87,88,111,112,113,114,115,],[-21,77,-12,-34,-22,-51,-52,-23,-25,-24,-26,-10,-11,-32,-33,-20,]),'GE':([51,53,55,57,59,60,61,83,84,87,88,111,112,113,114,115,],[-21,78,-12,-34,-22,-51,-52,-23,-25,-24,-26,-10,-11,-32,-33,-20,]),'LE':([51,53,55,57,59,60,61,83,84,87,88,111,112,113,114,115,],[-21,79,-12,-34,-22,-51,-52,-23,-25,-24,-26,-10,-11,-32,-33,-20,]),'NE':([51,53,55,57,59,60,61,83,84,87,88,111,112,113,114,115,],[-21,80,-12,-34,-22,-51,-52,-23,-25,-24,-26,-10,-11,-32,-33,-20,]),'STRING':([97,],[122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'vars':([4,49,137,],[5,69,142,]),'funcs':([5,7,12,],[7,12,12,]),'empty':([5,7,11,12,22,50,62,66,67,68,117,121,122,144,],[9,9,17,9,17,73,92,98,98,102,92,98,98,102,]),'var_ayuda':([6,50,],[10,72,]),'var_doble_ayuda':([11,22,],[15,40,]),'body':([13,33,49,69,94,131,137,142,],[18,46,70,103,118,140,143,146,]),'statements':([19,],[24,]),'statement':([19,24,],[25,42,]),'assign':([19,24,],[26,26,]),'condition':([19,24,],[27,27,]),'cycle':([19,24,],[28,28,]),'f_call':([19,24,],[29,29,]),'print':([19,24,],[30,30,]),'type':([21,48,138,],[37,68,144,]),'expression':([43,44,45,47,58,91,95,97,],[52,62,64,66,89,117,119,121,]),'exp':([43,44,45,47,58,75,76,77,78,79,80,91,95,97,],[53,53,53,53,53,105,106,107,108,109,110,53,53,53,]),'termino':([43,44,45,47,58,75,76,77,78,79,80,81,82,91,95,97,],[55,55,55,55,55,55,55,55,55,55,55,111,112,55,55,55,]),'factor':([43,44,45,47,58,75,76,77,78,79,80,81,82,85,86,91,95,97,],[57,57,57,57,57,57,57,57,57,57,57,57,57,113,114,57,57,57,]),'cte':([43,44,45,47,54,56,58,75,76,77,78,79,80,81,82,85,86,91,95,97,],[59,59,59,59,84,88,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'var_ayuda_tail':([50,],[71,]),'f_call_ayuda':([62,117,],[90,129,]),'print_ayuda':([66,67,121,122,],[96,99,134,135,]),'funcs_ayuda':([68,144,],[100,148,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',18),
  ('type -> INT','type',1,'p_type_int','parser.py',23),
  ('type -> FLOAT','type',1,'p_type_float','parser.py',27),
  ('vars -> VAR var_ayuda','vars',2,'p_vars','parser.py',32),
  ('var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail','var_ayuda',6,'p_var_ayuda','parser.py',36),
  ('var_ayuda_tail -> var_ayuda','var_ayuda_tail',1,'p_var_ayuda_tail','parser.py',40),
  ('var_ayuda_tail -> empty','var_ayuda_tail',1,'p_var_ayuda_tail_empty','parser.py',44),
  ('var_doble_ayuda -> , ID var_doble_ayuda','var_doble_ayuda',3,'p_var_doble_ayuda','parser.py',48),
  ('var_doble_ayuda -> empty','var_doble_ayuda',1,'p_var_doble_ayuda_empty','parser.py',52),
  ('exp -> exp + termino','exp',3,'p_exp_add','parser.py',57),
  ('exp -> exp - termino','exp',3,'p_exp_sub','parser.py',61),
  ('exp -> termino','exp',1,'p_exp_term','parser.py',65),
  ('expression -> exp > exp','expression',3,'p_expression_gt','parser.py',70),
  ('expression -> exp < exp','expression',3,'p_expression_lt','parser.py',74),
  ('expression -> exp EQ exp','expression',3,'p_expression_eq','parser.py',78),
  ('expression -> exp GE exp','expression',3,'p_expression_ge','parser.py',82),
  ('expression -> exp LE exp','expression',3,'p_expression_le','parser.py',86),
  ('expression -> exp NE exp','expression',3,'p_expression_ne','parser.py',90),
  ('expression -> exp','expression',1,'p_expression_exp','parser.py',94),
  ('factor -> ( expression )','factor',3,'p_factor_group','parser.py',99),
  ('factor -> ID','factor',1,'p_factor_id','parser.py',103),
  ('factor -> cte','factor',1,'p_factor_cte','parser.py',107),
  ('factor -> + ID','factor',2,'p_factor_pos_id','parser.py',111),
  ('factor -> - ID','factor',2,'p_factor_neg_id','parser.py',115),
  ('factor -> + cte','factor',2,'p_factor_pos_cte','parser.py',119),
  ('factor -> - cte','factor',2,'p_factor_neg_cte','parser.py',123),
  ('print -> PRINT ( expression print_ayuda ) ;','print',6,'p_print_expr','parser.py',128),
  ('print -> PRINT ( CONST_STRING print_ayuda ) ;','print',6,'p_print_string','parser.py',132),
  ('print_ayuda -> , expression print_ayuda','print_ayuda',3,'p_print_ayuda_expr','parser.py',136),
  ('print_ayuda -> , STRING print_ayuda','print_ayuda',3,'p_print_ayuda_string','parser.py',140),
  ('print_ayuda -> empty','print_ayuda',1,'p_print_ayuda_empty','parser.py',144),
  ('termino -> termino * factor','termino',3,'p_termino_mul','parser.py',148),
  ('termino -> termino / factor','termino',3,'p_termino_div','parser.py',152),
  ('termino -> factor','termino',1,'p_termino_factor','parser.py',156),
  ('cycle -> DO body WHILE ( expression ) ;','cycle',7,'p_cycle','parser.py',162),
  ('condition -> IF ( expression ) body ;','condition',6,'p_condition_if','parser.py',167),
  ('condition -> IF ( expression ) body ELSE body ;','condition',8,'p_condition_if_else','parser.py',171),
  ('assign -> ID = expression ;','assign',4,'p_assign','parser.py',176),
  ('f_call -> ID ( expression f_call_ayuda ) ;','f_call',6,'p_f_call_args','parser.py',181),
  ('f_call -> ID ( ) ;','f_call',4,'p_f_call_no_args','parser.py',185),
  ('f_call_ayuda -> , expression f_call_ayuda','f_call_ayuda',3,'p_f_call_ayuda','parser.py',189),
  ('f_call_ayuda -> empty','f_call_ayuda',1,'p_f_call_ayuda_empty','parser.py',193),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',198),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',202),
  ('statement -> assign','statement',1,'p_statement_assign','parser.py',206),
  ('statement -> condition','statement',1,'p_statement_condition','parser.py',210),
  ('statement -> cycle','statement',1,'p_statement_cycle','parser.py',214),
  ('statement -> f_call','statement',1,'p_statement_f_call','parser.py',218),
  ('statement -> print','statement',1,'p_statement_print','parser.py',222),
  ('body -> { statements }','body',3,'p_body','parser.py',227),
  ('cte -> CONST_INT','cte',1,'p_cte_int','parser.py',233),
  ('cte -> CONST_FLOAT','cte',1,'p_cte_float','parser.py',237),
  ('funcs -> VOID ID ( ID : type funcs_ayuda ) [ vars body ] ;','funcs',13,'p_funcs_params','parser.py',242),
  ('funcs -> VOID ID ( ) [ vars body ] ;','funcs',9,'p_funcs_empty_params','parser.py',246),
  ('funcs -> VOID ID ( ID : type funcs_ayuda ) [ body ] ;','funcs',12,'p_funcs_params_no_vars','parser.py',250),
  ('funcs -> VOID ID ( ) [ body ] ;','funcs',8,'p_funcs_empty_params_no_vars','parser.py',254),
  ('funcs -> funcs funcs','funcs',2,'p_funcs_multiple','parser.py',258),
  ('funcs -> empty','funcs',1,'p_funcs_empty','parser.py',262),
  ('funcs_ayuda -> , ID : type funcs_ayuda','funcs_ayuda',5,'p_funcs_ayuda','parser.py',266),
  ('funcs_ayuda -> empty','funcs_ayuda',1,'p_funcs_ayuda_empty','parser.py',270),
  ('program -> PROGRAM ID ; vars funcs MAIN body END','program',8,'p_program','parser.py',276),
]
