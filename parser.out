Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CONST_FLOAT
    CONST_INT
    CONST_STRING
    FOR
    MAIN
    THEN

Grammar

Rule 0     S' -> vars
Rule 1     vars -> vars VAR var_ayuda
Rule 2     vars -> VAR var_ayuda
Rule 3     var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail
Rule 4     var_ayuda_tail -> var_ayuda
Rule 5     var_ayuda_tail -> <empty>
Rule 6     var_doble_ayuda -> , ID var_doble_ayuda
Rule 7     var_doble_ayuda -> <empty>
Rule 8     type -> INT
Rule 9     type -> FLOAT
Rule 10    body -> { statements }
Rule 11    statements -> statements statement
Rule 12    statements -> statement
Rule 13    statement -> assign
Rule 14    statement -> condition
Rule 15    statement -> cycle
Rule 16    statement -> f_call
Rule 17    statement -> print
Rule 18    print -> PRINT ( expression print_ayuda ) ;
Rule 19    print -> PRINT ( STRING print_ayuda ) ;
Rule 20    print_ayuda -> , expression print_ayuda
Rule 21    print_ayuda -> , STRING print_ayuda
Rule 22    print_ayuda -> <empty>
Rule 23    cycle -> DO body WHILE ( expression ) ;
Rule 24    condition -> IF ( expression ) body ;
Rule 25    condition -> IF ( expression ) body ELSE body ;
Rule 26    assign -> ID = expression ;
Rule 27    expression -> exp > exp
Rule 28    expression -> exp < exp
Rule 29    expression -> exp EQ exp
Rule 30    expression -> exp GE exp
Rule 31    expression -> exp LE exp
Rule 32    expression -> exp NE exp
Rule 33    expression -> exp
Rule 34    exp -> exp + termino
Rule 35    exp -> exp - termino
Rule 36    exp -> termino
Rule 37    termino -> termino * factor
Rule 38    termino -> termino / factor
Rule 39    termino -> factor
Rule 40    factor -> ( expression )
Rule 41    factor -> ID
Rule 42    factor -> + ID
Rule 43    factor -> - ID
Rule 44    factor -> + cte
Rule 45    factor -> - cte
Rule 46    cte -> INT
Rule 47    cte -> FLOAT
Rule 48    funcs -> VOID ID ( ID : type funcs_ayuda ) [ vars body ] ;
Rule 49    funcs -> VOID ID ( ) [ vars body ] ;
Rule 50    funcs -> VOID ID ( ID : type funcs_ayuda ) [ body ] ;
Rule 51    funcs -> VOID ID ( ) [ body ] ;
Rule 52    funcs -> funcs funcs
Rule 53    funcs -> <empty>
Rule 54    funcs_ayuda -> , ID : type funcs_ayuda
Rule 55    funcs_ayuda -> <empty>
Rule 56    f_call -> ID ( expression f_call_ayuda ) ;
Rule 57    f_call -> ID ( ) ;
Rule 58    f_call_ayuda -> , expression f_call_ayuda
Rule 59    f_call_ayuda -> <empty>
Rule 60    program -> PROGRAM ID ; vars funcs main body END

Terminals, with rules where they appear

(                    : 18 19 23 24 25 40 48 49 50 51 56 57
)                    : 18 19 23 24 25 40 48 49 50 51 56 57
*                    : 37
+                    : 34 42 44
,                    : 6 20 21 54 58
-                    : 35 43 45
/                    : 38
:                    : 3 48 50 54
;                    : 3 18 19 23 24 25 26 48 49 50 51 56 57 60
<                    : 28
=                    : 26
>                    : 27
CONST_FLOAT          : 
CONST_INT            : 
CONST_STRING         : 
DO                   : 23
ELSE                 : 25
END                  : 60
EQ                   : 29
FLOAT                : 9 47
FOR                  : 
GE                   : 30
ID                   : 3 6 26 41 42 43 48 48 49 50 50 51 54 56 57 60
IF                   : 24 25
INT                  : 8 46
LE                   : 31
MAIN                 : 
NE                   : 32
PRINT                : 18 19
PROGRAM              : 60
STRING               : 19 21
THEN                 : 
VAR                  : 1 2
VOID                 : 48 49 50 51
WHILE                : 23
[                    : 48 49 50 51
]                    : 48 49 50 51
error                : 
{                    : 10
}                    : 10

Nonterminals, with rules where they appear

assign               : 13
body                 : 23 24 25 25 48 49 50 51 60
condition            : 14
cte                  : 44 45
cycle                : 15
exp                  : 27 27 28 28 29 29 30 30 31 31 32 32 33 34 35
expression           : 18 20 23 24 25 26 40 56 58
f_call               : 16
f_call_ayuda         : 56 58
factor               : 37 38 39
funcs                : 52 52 60
funcs_ayuda          : 48 50 54
main                 : 60
print                : 17
print_ayuda          : 18 19 20 21
program              : 
statement            : 11 12
statements           : 10 11
termino              : 34 35 36 37 38
type                 : 3 48 50 54
var_ayuda            : 1 2 4
var_ayuda_tail       : 3
var_doble_ayuda      : 3 6
vars                 : 1 48 49 60 0

