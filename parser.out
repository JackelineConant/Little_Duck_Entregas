Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CONST_FLOAT
    CONST_INT
    CONST_STRING
    FOR
    THEN

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID ; vars funcs MAIN body END
Rule 2     vars -> vars VAR var_ayuda
Rule 3     vars -> VAR var_ayuda
Rule 4     var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail
Rule 5     var_ayuda_tail -> var_ayuda
Rule 6     var_ayuda_tail -> <empty>
Rule 7     var_doble_ayuda -> , ID var_doble_ayuda
Rule 8     var_doble_ayuda -> <empty>
Rule 9     type -> INT
Rule 10    type -> FLOAT
Rule 11    body -> { statements }
Rule 12    statements -> statements statement
Rule 13    statements -> statement
Rule 14    statement -> assign
Rule 15    statement -> condition
Rule 16    statement -> cycle
Rule 17    statement -> f_call
Rule 18    statement -> print
Rule 19    print -> PRINT ( expression print_ayuda ) ;
Rule 20    print -> PRINT ( STRING print_ayuda ) ;
Rule 21    print_ayuda -> , expression print_ayuda
Rule 22    print_ayuda -> , STRING print_ayuda
Rule 23    print_ayuda -> <empty>
Rule 24    cycle -> DO body WHILE ( expression ) ;
Rule 25    condition -> IF ( expression ) body ;
Rule 26    condition -> IF ( expression ) body ELSE body ;
Rule 27    assign -> ID = expression ;
Rule 28    expression -> exp > exp
Rule 29    expression -> exp < exp
Rule 30    expression -> exp EQ exp
Rule 31    expression -> exp GE exp
Rule 32    expression -> exp LE exp
Rule 33    expression -> exp NE exp
Rule 34    expression -> exp
Rule 35    exp -> exp + termino
Rule 36    exp -> exp - termino
Rule 37    exp -> termino
Rule 38    termino -> termino * factor
Rule 39    termino -> termino / factor
Rule 40    termino -> factor
Rule 41    factor -> ( expression )
Rule 42    factor -> ID
Rule 43    factor -> + ID
Rule 44    factor -> - ID
Rule 45    factor -> + cte
Rule 46    factor -> - cte
Rule 47    cte -> INT
Rule 48    cte -> FLOAT
Rule 49    funcs -> VOID ID ( ID : type funcs_ayuda ) [ vars body ] ;
Rule 50    funcs -> VOID ID ( ) [ vars body ] ;
Rule 51    funcs -> VOID ID ( ID : type funcs_ayuda ) [ body ] ;
Rule 52    funcs -> VOID ID ( ) [ body ] ;
Rule 53    funcs -> funcs funcs
Rule 54    funcs -> <empty>
Rule 55    funcs_ayuda -> , ID : type funcs_ayuda
Rule 56    funcs_ayuda -> <empty>
Rule 57    f_call -> ID ( expression f_call_ayuda ) ;
Rule 58    f_call -> ID ( ) ;
Rule 59    f_call_ayuda -> , expression f_call_ayuda
Rule 60    f_call_ayuda -> <empty>

Terminals, with rules where they appear

(                    : 19 20 24 25 26 41 49 50 51 52 57 58
)                    : 19 20 24 25 26 41 49 50 51 52 57 58
*                    : 38
+                    : 35 43 45
,                    : 7 21 22 55 59
-                    : 36 44 46
/                    : 39
:                    : 4 49 51 55
;                    : 1 4 19 20 24 25 26 27 49 50 51 52 57 58
<                    : 29
=                    : 27
>                    : 28
CONST_FLOAT          : 
CONST_INT            : 
CONST_STRING         : 
DO                   : 24
ELSE                 : 26
END                  : 1
EQ                   : 30
FLOAT                : 10 48
FOR                  : 
GE                   : 31
ID                   : 1 4 7 27 42 43 44 49 49 50 51 51 52 55 57 58
IF                   : 25 26
INT                  : 9 47
LE                   : 32
MAIN                 : 1
NE                   : 33
PRINT                : 19 20
PROGRAM              : 1
STRING               : 20 22
THEN                 : 
VAR                  : 2 3
VOID                 : 49 50 51 52
WHILE                : 24
[                    : 49 50 51 52
]                    : 49 50 51 52
error                : 
{                    : 11
}                    : 11

Nonterminals, with rules where they appear

assign               : 14
body                 : 1 24 25 26 26 49 50 51 52
condition            : 15
cte                  : 45 46
cycle                : 16
exp                  : 28 28 29 29 30 30 31 31 32 32 33 33 34 35 36
expression           : 19 21 24 25 26 27 41 57 59
f_call               : 17
f_call_ayuda         : 57 59
factor               : 38 39 40
funcs                : 1 53 53
funcs_ayuda          : 49 51 55
print                : 18
print_ayuda          : 19 20 21 22
program              : 0
statement            : 12 13
statements           : 11 12
termino              : 35 36 37 38 39
type                 : 4 49 51 55
var_ayuda            : 2 3 5
var_ayuda_tail       : 4
var_doble_ayuda      : 4 7
vars                 : 1 2 49 50

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID ; vars funcs MAIN body END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID ; vars funcs MAIN body END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . ; vars funcs MAIN body END

    ;               shift and go to state 4


state 4

    (1) program -> PROGRAM ID ; . vars funcs MAIN body END
    (2) vars -> . vars VAR var_ayuda
    (3) vars -> . VAR var_ayuda

    VAR             shift and go to state 6

    vars                           shift and go to state 5

state 5

    (1) program -> PROGRAM ID ; vars . funcs MAIN body END
    (2) vars -> vars . VAR var_ayuda
    (49) funcs -> . VOID ID ( ID : type funcs_ayuda ) [ vars body ] ;
    (50) funcs -> . VOID ID ( ) [ vars body ] ;
    (51) funcs -> . VOID ID ( ID : type funcs_ayuda ) [ body ] ;
    (52) funcs -> . VOID ID ( ) [ body ] ;
    (53) funcs -> . funcs funcs
    (54) funcs -> .

  ! shift/reduce conflict for VOID resolved as shift
    VAR             shift and go to state 8
    VOID            shift and go to state 9
    MAIN            reduce using rule 54 (funcs -> .)

  ! VOID            [ reduce using rule 54 (funcs -> .) ]

    funcs                          shift and go to state 7

state 6

    (3) vars -> VAR . var_ayuda
    (4) var_ayuda -> . ID var_doble_ayuda : type ; var_ayuda_tail

    ID              shift and go to state 11

    var_ayuda                      shift and go to state 10

state 7

    (1) program -> PROGRAM ID ; vars funcs . MAIN body END
    (53) funcs -> funcs . funcs
    (49) funcs -> . VOID ID ( ID : type funcs_ayuda ) [ vars body ] ;
    (50) funcs -> . VOID ID ( ) [ vars body ] ;
    (51) funcs -> . VOID ID ( ID : type funcs_ayuda ) [ body ] ;
    (52) funcs -> . VOID ID ( ) [ body ] ;
    (53) funcs -> . funcs funcs
    (54) funcs -> .

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for MAIN resolved as shift
    MAIN            shift and go to state 13
    VOID            shift and go to state 9

  ! VOID            [ reduce using rule 54 (funcs -> .) ]
  ! MAIN            [ reduce using rule 54 (funcs -> .) ]

    funcs                          shift and go to state 12

state 8

    (2) vars -> vars VAR . var_ayuda
    (4) var_ayuda -> . ID var_doble_ayuda : type ; var_ayuda_tail

    ID              shift and go to state 11

    var_ayuda                      shift and go to state 14

state 9

    (49) funcs -> VOID . ID ( ID : type funcs_ayuda ) [ vars body ] ;
    (50) funcs -> VOID . ID ( ) [ vars body ] ;
    (51) funcs -> VOID . ID ( ID : type funcs_ayuda ) [ body ] ;
    (52) funcs -> VOID . ID ( ) [ body ] ;

    ID              shift and go to state 15


state 10

    (3) vars -> VAR var_ayuda .

    VAR             reduce using rule 3 (vars -> VAR var_ayuda .)
    VOID            reduce using rule 3 (vars -> VAR var_ayuda .)
    MAIN            reduce using rule 3 (vars -> VAR var_ayuda .)
    {               reduce using rule 3 (vars -> VAR var_ayuda .)


state 11

    (4) var_ayuda -> ID . var_doble_ayuda : type ; var_ayuda_tail
    (7) var_doble_ayuda -> . , ID var_doble_ayuda
    (8) var_doble_ayuda -> .

    ,               shift and go to state 17
    :               reduce using rule 8 (var_doble_ayuda -> .)

    var_doble_ayuda                shift and go to state 16

state 12

    (53) funcs -> funcs funcs .
    (53) funcs -> funcs . funcs
    (49) funcs -> . VOID ID ( ID : type funcs_ayuda ) [ vars body ] ;
    (50) funcs -> . VOID ID ( ) [ vars body ] ;
    (51) funcs -> . VOID ID ( ID : type funcs_ayuda ) [ body ] ;
    (52) funcs -> . VOID ID ( ) [ body ] ;
    (53) funcs -> . funcs funcs
    (54) funcs -> .

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! reduce/reduce conflict for MAIN resolved using rule 53 (funcs -> funcs funcs .)
    MAIN            reduce using rule 53 (funcs -> funcs funcs .)
    VOID            shift and go to state 9

  ! VOID            [ reduce using rule 53 (funcs -> funcs funcs .) ]
  ! VOID            [ reduce using rule 54 (funcs -> .) ]
  ! MAIN            [ reduce using rule 54 (funcs -> .) ]

    funcs                          shift and go to state 12

state 13

    (1) program -> PROGRAM ID ; vars funcs MAIN . body END
    (11) body -> . { statements }

    {               shift and go to state 19

    body                           shift and go to state 18

state 14

    (2) vars -> vars VAR var_ayuda .

    VAR             reduce using rule 2 (vars -> vars VAR var_ayuda .)
    VOID            reduce using rule 2 (vars -> vars VAR var_ayuda .)
    MAIN            reduce using rule 2 (vars -> vars VAR var_ayuda .)
    {               reduce using rule 2 (vars -> vars VAR var_ayuda .)


state 15

    (49) funcs -> VOID ID . ( ID : type funcs_ayuda ) [ vars body ] ;
    (50) funcs -> VOID ID . ( ) [ vars body ] ;
    (51) funcs -> VOID ID . ( ID : type funcs_ayuda ) [ body ] ;
    (52) funcs -> VOID ID . ( ) [ body ] ;

    (               shift and go to state 20


state 16

    (4) var_ayuda -> ID var_doble_ayuda . : type ; var_ayuda_tail

    :               shift and go to state 21


state 17

    (7) var_doble_ayuda -> , . ID var_doble_ayuda

    ID              shift and go to state 22


state 18

    (1) program -> PROGRAM ID ; vars funcs MAIN body . END

    END             shift and go to state 23


state 19

    (11) body -> { . statements }
    (12) statements -> . statements statement
    (13) statements -> . statement
    (14) statement -> . assign
    (15) statement -> . condition
    (16) statement -> . cycle
    (17) statement -> . f_call
    (18) statement -> . print
    (27) assign -> . ID = expression ;
    (25) condition -> . IF ( expression ) body ;
    (26) condition -> . IF ( expression ) body ELSE body ;
    (24) cycle -> . DO body WHILE ( expression ) ;
    (57) f_call -> . ID ( expression f_call_ayuda ) ;
    (58) f_call -> . ID ( ) ;
    (19) print -> . PRINT ( expression print_ayuda ) ;
    (20) print -> . PRINT ( STRING print_ayuda ) ;

    ID              shift and go to state 31
    IF              shift and go to state 32
    DO              shift and go to state 33
    PRINT           shift and go to state 34

    statements                     shift and go to state 24
    statement                      shift and go to state 25
    assign                         shift and go to state 26
    condition                      shift and go to state 27
    cycle                          shift and go to state 28
    f_call                         shift and go to state 29
    print                          shift and go to state 30

state 20

    (49) funcs -> VOID ID ( . ID : type funcs_ayuda ) [ vars body ] ;
    (50) funcs -> VOID ID ( . ) [ vars body ] ;
    (51) funcs -> VOID ID ( . ID : type funcs_ayuda ) [ body ] ;
    (52) funcs -> VOID ID ( . ) [ body ] ;

    ID              shift and go to state 35
    )               shift and go to state 36


state 21

    (4) var_ayuda -> ID var_doble_ayuda : . type ; var_ayuda_tail
    (9) type -> . INT
    (10) type -> . FLOAT

    INT             shift and go to state 38
    FLOAT           shift and go to state 39

    type                           shift and go to state 37

state 22

    (7) var_doble_ayuda -> , ID . var_doble_ayuda
    (7) var_doble_ayuda -> . , ID var_doble_ayuda
    (8) var_doble_ayuda -> .

    ,               shift and go to state 17
    :               reduce using rule 8 (var_doble_ayuda -> .)

    var_doble_ayuda                shift and go to state 40

state 23

    (1) program -> PROGRAM ID ; vars funcs MAIN body END .

    $end            reduce using rule 1 (program -> PROGRAM ID ; vars funcs MAIN body END .)


state 24

    (11) body -> { statements . }
    (12) statements -> statements . statement
    (14) statement -> . assign
    (15) statement -> . condition
    (16) statement -> . cycle
    (17) statement -> . f_call
    (18) statement -> . print
    (27) assign -> . ID = expression ;
    (25) condition -> . IF ( expression ) body ;
    (26) condition -> . IF ( expression ) body ELSE body ;
    (24) cycle -> . DO body WHILE ( expression ) ;
    (57) f_call -> . ID ( expression f_call_ayuda ) ;
    (58) f_call -> . ID ( ) ;
    (19) print -> . PRINT ( expression print_ayuda ) ;
    (20) print -> . PRINT ( STRING print_ayuda ) ;

    }               shift and go to state 41
    ID              shift and go to state 31
    IF              shift and go to state 32
    DO              shift and go to state 33
    PRINT           shift and go to state 34

    statement                      shift and go to state 42
    assign                         shift and go to state 26
    condition                      shift and go to state 27
    cycle                          shift and go to state 28
    f_call                         shift and go to state 29
    print                          shift and go to state 30

state 25

    (13) statements -> statement .

    }               reduce using rule 13 (statements -> statement .)
    ID              reduce using rule 13 (statements -> statement .)
    IF              reduce using rule 13 (statements -> statement .)
    DO              reduce using rule 13 (statements -> statement .)
    PRINT           reduce using rule 13 (statements -> statement .)


state 26

    (14) statement -> assign .

    }               reduce using rule 14 (statement -> assign .)
    ID              reduce using rule 14 (statement -> assign .)
    IF              reduce using rule 14 (statement -> assign .)
    DO              reduce using rule 14 (statement -> assign .)
    PRINT           reduce using rule 14 (statement -> assign .)


state 27

    (15) statement -> condition .

    }               reduce using rule 15 (statement -> condition .)
    ID              reduce using rule 15 (statement -> condition .)
    IF              reduce using rule 15 (statement -> condition .)
    DO              reduce using rule 15 (statement -> condition .)
    PRINT           reduce using rule 15 (statement -> condition .)


state 28

    (16) statement -> cycle .

    }               reduce using rule 16 (statement -> cycle .)
    ID              reduce using rule 16 (statement -> cycle .)
    IF              reduce using rule 16 (statement -> cycle .)
    DO              reduce using rule 16 (statement -> cycle .)
    PRINT           reduce using rule 16 (statement -> cycle .)


state 29

    (17) statement -> f_call .

    }               reduce using rule 17 (statement -> f_call .)
    ID              reduce using rule 17 (statement -> f_call .)
    IF              reduce using rule 17 (statement -> f_call .)
    DO              reduce using rule 17 (statement -> f_call .)
    PRINT           reduce using rule 17 (statement -> f_call .)


state 30

    (18) statement -> print .

    }               reduce using rule 18 (statement -> print .)
    ID              reduce using rule 18 (statement -> print .)
    IF              reduce using rule 18 (statement -> print .)
    DO              reduce using rule 18 (statement -> print .)
    PRINT           reduce using rule 18 (statement -> print .)


state 31

    (27) assign -> ID . = expression ;
    (57) f_call -> ID . ( expression f_call_ayuda ) ;
    (58) f_call -> ID . ( ) ;

    =               shift and go to state 43
    (               shift and go to state 44


state 32

    (25) condition -> IF . ( expression ) body ;
    (26) condition -> IF . ( expression ) body ELSE body ;

    (               shift and go to state 45


state 33

    (24) cycle -> DO . body WHILE ( expression ) ;
    (11) body -> . { statements }

    {               shift and go to state 19

    body                           shift and go to state 46

state 34

    (19) print -> PRINT . ( expression print_ayuda ) ;
    (20) print -> PRINT . ( STRING print_ayuda ) ;

    (               shift and go to state 47


state 35

    (49) funcs -> VOID ID ( ID . : type funcs_ayuda ) [ vars body ] ;
    (51) funcs -> VOID ID ( ID . : type funcs_ayuda ) [ body ] ;

    :               shift and go to state 48


state 36

    (50) funcs -> VOID ID ( ) . [ vars body ] ;
    (52) funcs -> VOID ID ( ) . [ body ] ;

    [               shift and go to state 49


state 37

    (4) var_ayuda -> ID var_doble_ayuda : type . ; var_ayuda_tail

    ;               shift and go to state 50


state 38

    (9) type -> INT .

    ;               reduce using rule 9 (type -> INT .)
    ,               reduce using rule 9 (type -> INT .)
    )               reduce using rule 9 (type -> INT .)


state 39

    (10) type -> FLOAT .

    ;               reduce using rule 10 (type -> FLOAT .)
    ,               reduce using rule 10 (type -> FLOAT .)
    )               reduce using rule 10 (type -> FLOAT .)


state 40

    (7) var_doble_ayuda -> , ID var_doble_ayuda .

    :               reduce using rule 7 (var_doble_ayuda -> , ID var_doble_ayuda .)


state 41

    (11) body -> { statements } .

    END             reduce using rule 11 (body -> { statements } .)
    WHILE           reduce using rule 11 (body -> { statements } .)
    ]               reduce using rule 11 (body -> { statements } .)
    ;               reduce using rule 11 (body -> { statements } .)
    ELSE            reduce using rule 11 (body -> { statements } .)


state 42

    (12) statements -> statements statement .

    }               reduce using rule 12 (statements -> statements statement .)
    ID              reduce using rule 12 (statements -> statements statement .)
    IF              reduce using rule 12 (statements -> statements statement .)
    DO              reduce using rule 12 (statements -> statements statement .)
    PRINT           reduce using rule 12 (statements -> statements statement .)


state 43

    (27) assign -> ID = . expression ;
    (28) expression -> . exp > exp
    (29) expression -> . exp < exp
    (30) expression -> . exp EQ exp
    (31) expression -> . exp GE exp
    (32) expression -> . exp LE exp
    (33) expression -> . exp NE exp
    (34) expression -> . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    expression                     shift and go to state 52
    exp                            shift and go to state 53
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 44

    (57) f_call -> ID ( . expression f_call_ayuda ) ;
    (58) f_call -> ID ( . ) ;
    (28) expression -> . exp > exp
    (29) expression -> . exp < exp
    (30) expression -> . exp EQ exp
    (31) expression -> . exp GE exp
    (32) expression -> . exp LE exp
    (33) expression -> . exp NE exp
    (34) expression -> . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    )               shift and go to state 60
    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    expression                     shift and go to state 59
    exp                            shift and go to state 53
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 45

    (25) condition -> IF ( . expression ) body ;
    (26) condition -> IF ( . expression ) body ELSE body ;
    (28) expression -> . exp > exp
    (29) expression -> . exp < exp
    (30) expression -> . exp EQ exp
    (31) expression -> . exp GE exp
    (32) expression -> . exp LE exp
    (33) expression -> . exp NE exp
    (34) expression -> . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    expression                     shift and go to state 61
    exp                            shift and go to state 53
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 46

    (24) cycle -> DO body . WHILE ( expression ) ;

    WHILE           shift and go to state 62


state 47

    (19) print -> PRINT ( . expression print_ayuda ) ;
    (20) print -> PRINT ( . STRING print_ayuda ) ;
    (28) expression -> . exp > exp
    (29) expression -> . exp < exp
    (30) expression -> . exp EQ exp
    (31) expression -> . exp GE exp
    (32) expression -> . exp LE exp
    (33) expression -> . exp NE exp
    (34) expression -> . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    STRING          shift and go to state 64
    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    expression                     shift and go to state 63
    exp                            shift and go to state 53
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 48

    (49) funcs -> VOID ID ( ID : . type funcs_ayuda ) [ vars body ] ;
    (51) funcs -> VOID ID ( ID : . type funcs_ayuda ) [ body ] ;
    (9) type -> . INT
    (10) type -> . FLOAT

    INT             shift and go to state 38
    FLOAT           shift and go to state 39

    type                           shift and go to state 65

state 49

    (50) funcs -> VOID ID ( ) [ . vars body ] ;
    (52) funcs -> VOID ID ( ) [ . body ] ;
    (2) vars -> . vars VAR var_ayuda
    (3) vars -> . VAR var_ayuda
    (11) body -> . { statements }

    VAR             shift and go to state 6
    {               shift and go to state 19

    vars                           shift and go to state 66
    body                           shift and go to state 67

state 50

    (4) var_ayuda -> ID var_doble_ayuda : type ; . var_ayuda_tail
    (5) var_ayuda_tail -> . var_ayuda
    (6) var_ayuda_tail -> .
    (4) var_ayuda -> . ID var_doble_ayuda : type ; var_ayuda_tail

    VAR             reduce using rule 6 (var_ayuda_tail -> .)
    VOID            reduce using rule 6 (var_ayuda_tail -> .)
    MAIN            reduce using rule 6 (var_ayuda_tail -> .)
    {               reduce using rule 6 (var_ayuda_tail -> .)
    ID              shift and go to state 11

    var_ayuda_tail                 shift and go to state 68
    var_ayuda                      shift and go to state 69

state 51

    (42) factor -> ID .

    *               reduce using rule 42 (factor -> ID .)
    /               reduce using rule 42 (factor -> ID .)
    >               reduce using rule 42 (factor -> ID .)
    <               reduce using rule 42 (factor -> ID .)
    EQ              reduce using rule 42 (factor -> ID .)
    GE              reduce using rule 42 (factor -> ID .)
    LE              reduce using rule 42 (factor -> ID .)
    NE              reduce using rule 42 (factor -> ID .)
    +               reduce using rule 42 (factor -> ID .)
    -               reduce using rule 42 (factor -> ID .)
    ;               reduce using rule 42 (factor -> ID .)
    ,               reduce using rule 42 (factor -> ID .)
    )               reduce using rule 42 (factor -> ID .)


state 52

    (27) assign -> ID = expression . ;

    ;               shift and go to state 70


state 53

    (28) expression -> exp . > exp
    (29) expression -> exp . < exp
    (30) expression -> exp . EQ exp
    (31) expression -> exp . GE exp
    (32) expression -> exp . LE exp
    (33) expression -> exp . NE exp
    (34) expression -> exp .
    (35) exp -> exp . + termino
    (36) exp -> exp . - termino

    >               shift and go to state 71
    <               shift and go to state 72
    EQ              shift and go to state 73
    GE              shift and go to state 74
    LE              shift and go to state 75
    NE              shift and go to state 76
    ;               reduce using rule 34 (expression -> exp .)
    ,               reduce using rule 34 (expression -> exp .)
    )               reduce using rule 34 (expression -> exp .)
    +               shift and go to state 77
    -               shift and go to state 78


state 54

    (43) factor -> + . ID
    (45) factor -> + . cte
    (47) cte -> . INT
    (48) cte -> . FLOAT

    ID              shift and go to state 79
    INT             shift and go to state 81
    FLOAT           shift and go to state 82

    cte                            shift and go to state 80

state 55

    (37) exp -> termino .
    (38) termino -> termino . * factor
    (39) termino -> termino . / factor

    >               reduce using rule 37 (exp -> termino .)
    <               reduce using rule 37 (exp -> termino .)
    EQ              reduce using rule 37 (exp -> termino .)
    GE              reduce using rule 37 (exp -> termino .)
    LE              reduce using rule 37 (exp -> termino .)
    NE              reduce using rule 37 (exp -> termino .)
    +               reduce using rule 37 (exp -> termino .)
    -               reduce using rule 37 (exp -> termino .)
    ;               reduce using rule 37 (exp -> termino .)
    ,               reduce using rule 37 (exp -> termino .)
    )               reduce using rule 37 (exp -> termino .)
    *               shift and go to state 83
    /               shift and go to state 84


state 56

    (44) factor -> - . ID
    (46) factor -> - . cte
    (47) cte -> . INT
    (48) cte -> . FLOAT

    ID              shift and go to state 85
    INT             shift and go to state 81
    FLOAT           shift and go to state 82

    cte                            shift and go to state 86

state 57

    (40) termino -> factor .

    *               reduce using rule 40 (termino -> factor .)
    /               reduce using rule 40 (termino -> factor .)
    >               reduce using rule 40 (termino -> factor .)
    <               reduce using rule 40 (termino -> factor .)
    EQ              reduce using rule 40 (termino -> factor .)
    GE              reduce using rule 40 (termino -> factor .)
    LE              reduce using rule 40 (termino -> factor .)
    NE              reduce using rule 40 (termino -> factor .)
    +               reduce using rule 40 (termino -> factor .)
    -               reduce using rule 40 (termino -> factor .)
    ;               reduce using rule 40 (termino -> factor .)
    ,               reduce using rule 40 (termino -> factor .)
    )               reduce using rule 40 (termino -> factor .)


state 58

    (41) factor -> ( . expression )
    (28) expression -> . exp > exp
    (29) expression -> . exp < exp
    (30) expression -> . exp EQ exp
    (31) expression -> . exp GE exp
    (32) expression -> . exp LE exp
    (33) expression -> . exp NE exp
    (34) expression -> . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    expression                     shift and go to state 87
    exp                            shift and go to state 53
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 59

    (57) f_call -> ID ( expression . f_call_ayuda ) ;
    (59) f_call_ayuda -> . , expression f_call_ayuda
    (60) f_call_ayuda -> .

    ,               shift and go to state 89
    )               reduce using rule 60 (f_call_ayuda -> .)

    f_call_ayuda                   shift and go to state 88

state 60

    (58) f_call -> ID ( ) . ;

    ;               shift and go to state 90


state 61

    (25) condition -> IF ( expression . ) body ;
    (26) condition -> IF ( expression . ) body ELSE body ;

    )               shift and go to state 91


state 62

    (24) cycle -> DO body WHILE . ( expression ) ;

    (               shift and go to state 92


state 63

    (19) print -> PRINT ( expression . print_ayuda ) ;
    (21) print_ayuda -> . , expression print_ayuda
    (22) print_ayuda -> . , STRING print_ayuda
    (23) print_ayuda -> .

    ,               shift and go to state 94
    )               reduce using rule 23 (print_ayuda -> .)

    print_ayuda                    shift and go to state 93

state 64

    (20) print -> PRINT ( STRING . print_ayuda ) ;
    (21) print_ayuda -> . , expression print_ayuda
    (22) print_ayuda -> . , STRING print_ayuda
    (23) print_ayuda -> .

    ,               shift and go to state 94
    )               reduce using rule 23 (print_ayuda -> .)

    print_ayuda                    shift and go to state 95

state 65

    (49) funcs -> VOID ID ( ID : type . funcs_ayuda ) [ vars body ] ;
    (51) funcs -> VOID ID ( ID : type . funcs_ayuda ) [ body ] ;
    (55) funcs_ayuda -> . , ID : type funcs_ayuda
    (56) funcs_ayuda -> .

    ,               shift and go to state 97
    )               reduce using rule 56 (funcs_ayuda -> .)

    funcs_ayuda                    shift and go to state 96

state 66

    (50) funcs -> VOID ID ( ) [ vars . body ] ;
    (2) vars -> vars . VAR var_ayuda
    (11) body -> . { statements }

    VAR             shift and go to state 8
    {               shift and go to state 19

    body                           shift and go to state 98

state 67

    (52) funcs -> VOID ID ( ) [ body . ] ;

    ]               shift and go to state 99


state 68

    (4) var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail .

    VAR             reduce using rule 4 (var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail .)
    VOID            reduce using rule 4 (var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail .)
    MAIN            reduce using rule 4 (var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail .)
    {               reduce using rule 4 (var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail .)


state 69

    (5) var_ayuda_tail -> var_ayuda .

    VAR             reduce using rule 5 (var_ayuda_tail -> var_ayuda .)
    VOID            reduce using rule 5 (var_ayuda_tail -> var_ayuda .)
    MAIN            reduce using rule 5 (var_ayuda_tail -> var_ayuda .)
    {               reduce using rule 5 (var_ayuda_tail -> var_ayuda .)


state 70

    (27) assign -> ID = expression ; .

    }               reduce using rule 27 (assign -> ID = expression ; .)
    ID              reduce using rule 27 (assign -> ID = expression ; .)
    IF              reduce using rule 27 (assign -> ID = expression ; .)
    DO              reduce using rule 27 (assign -> ID = expression ; .)
    PRINT           reduce using rule 27 (assign -> ID = expression ; .)


state 71

    (28) expression -> exp > . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    exp                            shift and go to state 100
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 72

    (29) expression -> exp < . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    exp                            shift and go to state 101
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 73

    (30) expression -> exp EQ . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    exp                            shift and go to state 102
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 74

    (31) expression -> exp GE . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    exp                            shift and go to state 103
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 75

    (32) expression -> exp LE . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    exp                            shift and go to state 104
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 76

    (33) expression -> exp NE . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    exp                            shift and go to state 105
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 77

    (35) exp -> exp + . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    termino                        shift and go to state 106
    factor                         shift and go to state 57

state 78

    (36) exp -> exp - . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    termino                        shift and go to state 107
    factor                         shift and go to state 57

state 79

    (43) factor -> + ID .

    *               reduce using rule 43 (factor -> + ID .)
    /               reduce using rule 43 (factor -> + ID .)
    >               reduce using rule 43 (factor -> + ID .)
    <               reduce using rule 43 (factor -> + ID .)
    EQ              reduce using rule 43 (factor -> + ID .)
    GE              reduce using rule 43 (factor -> + ID .)
    LE              reduce using rule 43 (factor -> + ID .)
    NE              reduce using rule 43 (factor -> + ID .)
    +               reduce using rule 43 (factor -> + ID .)
    -               reduce using rule 43 (factor -> + ID .)
    ;               reduce using rule 43 (factor -> + ID .)
    ,               reduce using rule 43 (factor -> + ID .)
    )               reduce using rule 43 (factor -> + ID .)


state 80

    (45) factor -> + cte .

    *               reduce using rule 45 (factor -> + cte .)
    /               reduce using rule 45 (factor -> + cte .)
    >               reduce using rule 45 (factor -> + cte .)
    <               reduce using rule 45 (factor -> + cte .)
    EQ              reduce using rule 45 (factor -> + cte .)
    GE              reduce using rule 45 (factor -> + cte .)
    LE              reduce using rule 45 (factor -> + cte .)
    NE              reduce using rule 45 (factor -> + cte .)
    +               reduce using rule 45 (factor -> + cte .)
    -               reduce using rule 45 (factor -> + cte .)
    ;               reduce using rule 45 (factor -> + cte .)
    ,               reduce using rule 45 (factor -> + cte .)
    )               reduce using rule 45 (factor -> + cte .)


state 81

    (47) cte -> INT .

    *               reduce using rule 47 (cte -> INT .)
    /               reduce using rule 47 (cte -> INT .)
    >               reduce using rule 47 (cte -> INT .)
    <               reduce using rule 47 (cte -> INT .)
    EQ              reduce using rule 47 (cte -> INT .)
    GE              reduce using rule 47 (cte -> INT .)
    LE              reduce using rule 47 (cte -> INT .)
    NE              reduce using rule 47 (cte -> INT .)
    +               reduce using rule 47 (cte -> INT .)
    -               reduce using rule 47 (cte -> INT .)
    ;               reduce using rule 47 (cte -> INT .)
    ,               reduce using rule 47 (cte -> INT .)
    )               reduce using rule 47 (cte -> INT .)


state 82

    (48) cte -> FLOAT .

    *               reduce using rule 48 (cte -> FLOAT .)
    /               reduce using rule 48 (cte -> FLOAT .)
    >               reduce using rule 48 (cte -> FLOAT .)
    <               reduce using rule 48 (cte -> FLOAT .)
    EQ              reduce using rule 48 (cte -> FLOAT .)
    GE              reduce using rule 48 (cte -> FLOAT .)
    LE              reduce using rule 48 (cte -> FLOAT .)
    NE              reduce using rule 48 (cte -> FLOAT .)
    +               reduce using rule 48 (cte -> FLOAT .)
    -               reduce using rule 48 (cte -> FLOAT .)
    ;               reduce using rule 48 (cte -> FLOAT .)
    ,               reduce using rule 48 (cte -> FLOAT .)
    )               reduce using rule 48 (cte -> FLOAT .)


state 83

    (38) termino -> termino * . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    factor                         shift and go to state 108

state 84

    (39) termino -> termino / . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    factor                         shift and go to state 109

state 85

    (44) factor -> - ID .

    *               reduce using rule 44 (factor -> - ID .)
    /               reduce using rule 44 (factor -> - ID .)
    >               reduce using rule 44 (factor -> - ID .)
    <               reduce using rule 44 (factor -> - ID .)
    EQ              reduce using rule 44 (factor -> - ID .)
    GE              reduce using rule 44 (factor -> - ID .)
    LE              reduce using rule 44 (factor -> - ID .)
    NE              reduce using rule 44 (factor -> - ID .)
    +               reduce using rule 44 (factor -> - ID .)
    -               reduce using rule 44 (factor -> - ID .)
    ;               reduce using rule 44 (factor -> - ID .)
    ,               reduce using rule 44 (factor -> - ID .)
    )               reduce using rule 44 (factor -> - ID .)


state 86

    (46) factor -> - cte .

    *               reduce using rule 46 (factor -> - cte .)
    /               reduce using rule 46 (factor -> - cte .)
    >               reduce using rule 46 (factor -> - cte .)
    <               reduce using rule 46 (factor -> - cte .)
    EQ              reduce using rule 46 (factor -> - cte .)
    GE              reduce using rule 46 (factor -> - cte .)
    LE              reduce using rule 46 (factor -> - cte .)
    NE              reduce using rule 46 (factor -> - cte .)
    +               reduce using rule 46 (factor -> - cte .)
    -               reduce using rule 46 (factor -> - cte .)
    ;               reduce using rule 46 (factor -> - cte .)
    ,               reduce using rule 46 (factor -> - cte .)
    )               reduce using rule 46 (factor -> - cte .)


state 87

    (41) factor -> ( expression . )

    )               shift and go to state 110


state 88

    (57) f_call -> ID ( expression f_call_ayuda . ) ;

    )               shift and go to state 111


state 89

    (59) f_call_ayuda -> , . expression f_call_ayuda
    (28) expression -> . exp > exp
    (29) expression -> . exp < exp
    (30) expression -> . exp EQ exp
    (31) expression -> . exp GE exp
    (32) expression -> . exp LE exp
    (33) expression -> . exp NE exp
    (34) expression -> . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    expression                     shift and go to state 112
    exp                            shift and go to state 53
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 90

    (58) f_call -> ID ( ) ; .

    }               reduce using rule 58 (f_call -> ID ( ) ; .)
    ID              reduce using rule 58 (f_call -> ID ( ) ; .)
    IF              reduce using rule 58 (f_call -> ID ( ) ; .)
    DO              reduce using rule 58 (f_call -> ID ( ) ; .)
    PRINT           reduce using rule 58 (f_call -> ID ( ) ; .)


state 91

    (25) condition -> IF ( expression ) . body ;
    (26) condition -> IF ( expression ) . body ELSE body ;
    (11) body -> . { statements }

    {               shift and go to state 19

    body                           shift and go to state 113

state 92

    (24) cycle -> DO body WHILE ( . expression ) ;
    (28) expression -> . exp > exp
    (29) expression -> . exp < exp
    (30) expression -> . exp EQ exp
    (31) expression -> . exp GE exp
    (32) expression -> . exp LE exp
    (33) expression -> . exp NE exp
    (34) expression -> . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    expression                     shift and go to state 114
    exp                            shift and go to state 53
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 93

    (19) print -> PRINT ( expression print_ayuda . ) ;

    )               shift and go to state 115


state 94

    (21) print_ayuda -> , . expression print_ayuda
    (22) print_ayuda -> , . STRING print_ayuda
    (28) expression -> . exp > exp
    (29) expression -> . exp < exp
    (30) expression -> . exp EQ exp
    (31) expression -> . exp GE exp
    (32) expression -> . exp LE exp
    (33) expression -> . exp NE exp
    (34) expression -> . exp
    (35) exp -> . exp + termino
    (36) exp -> . exp - termino
    (37) exp -> . termino
    (38) termino -> . termino * factor
    (39) termino -> . termino / factor
    (40) termino -> . factor
    (41) factor -> . ( expression )
    (42) factor -> . ID
    (43) factor -> . + ID
    (44) factor -> . - ID
    (45) factor -> . + cte
    (46) factor -> . - cte

    STRING          shift and go to state 117
    (               shift and go to state 58
    ID              shift and go to state 51
    +               shift and go to state 54
    -               shift and go to state 56

    expression                     shift and go to state 116
    exp                            shift and go to state 53
    termino                        shift and go to state 55
    factor                         shift and go to state 57

state 95

    (20) print -> PRINT ( STRING print_ayuda . ) ;

    )               shift and go to state 118


state 96

    (49) funcs -> VOID ID ( ID : type funcs_ayuda . ) [ vars body ] ;
    (51) funcs -> VOID ID ( ID : type funcs_ayuda . ) [ body ] ;

    )               shift and go to state 119


state 97

    (55) funcs_ayuda -> , . ID : type funcs_ayuda

    ID              shift and go to state 120


state 98

    (50) funcs -> VOID ID ( ) [ vars body . ] ;

    ]               shift and go to state 121


state 99

    (52) funcs -> VOID ID ( ) [ body ] . ;

    ;               shift and go to state 122


state 100

    (28) expression -> exp > exp .
    (35) exp -> exp . + termino
    (36) exp -> exp . - termino

    ;               reduce using rule 28 (expression -> exp > exp .)
    ,               reduce using rule 28 (expression -> exp > exp .)
    )               reduce using rule 28 (expression -> exp > exp .)
    +               shift and go to state 77
    -               shift and go to state 78


state 101

    (29) expression -> exp < exp .
    (35) exp -> exp . + termino
    (36) exp -> exp . - termino

    ;               reduce using rule 29 (expression -> exp < exp .)
    ,               reduce using rule 29 (expression -> exp < exp .)
    )               reduce using rule 29 (expression -> exp < exp .)
    +               shift and go to state 77
    -               shift and go to state 78


state 102

    (30) expression -> exp EQ exp .
    (35) exp -> exp . + termino
    (36) exp -> exp . - termino

    ;               reduce using rule 30 (expression -> exp EQ exp .)
    ,               reduce using rule 30 (expression -> exp EQ exp .)
    )               reduce using rule 30 (expression -> exp EQ exp .)
    +               shift and go to state 77
    -               shift and go to state 78


state 103

    (31) expression -> exp GE exp .
    (35) exp -> exp . + termino
    (36) exp -> exp . - termino

    ;               reduce using rule 31 (expression -> exp GE exp .)
    ,               reduce using rule 31 (expression -> exp GE exp .)
    )               reduce using rule 31 (expression -> exp GE exp .)
    +               shift and go to state 77
    -               shift and go to state 78


state 104

    (32) expression -> exp LE exp .
    (35) exp -> exp . + termino
    (36) exp -> exp . - termino

    ;               reduce using rule 32 (expression -> exp LE exp .)
    ,               reduce using rule 32 (expression -> exp LE exp .)
    )               reduce using rule 32 (expression -> exp LE exp .)
    +               shift and go to state 77
    -               shift and go to state 78


state 105

    (33) expression -> exp NE exp .
    (35) exp -> exp . + termino
    (36) exp -> exp . - termino

    ;               reduce using rule 33 (expression -> exp NE exp .)
    ,               reduce using rule 33 (expression -> exp NE exp .)
    )               reduce using rule 33 (expression -> exp NE exp .)
    +               shift and go to state 77
    -               shift and go to state 78


state 106

    (35) exp -> exp + termino .
    (38) termino -> termino . * factor
    (39) termino -> termino . / factor

    >               reduce using rule 35 (exp -> exp + termino .)
    <               reduce using rule 35 (exp -> exp + termino .)
    EQ              reduce using rule 35 (exp -> exp + termino .)
    GE              reduce using rule 35 (exp -> exp + termino .)
    LE              reduce using rule 35 (exp -> exp + termino .)
    NE              reduce using rule 35 (exp -> exp + termino .)
    +               reduce using rule 35 (exp -> exp + termino .)
    -               reduce using rule 35 (exp -> exp + termino .)
    ;               reduce using rule 35 (exp -> exp + termino .)
    ,               reduce using rule 35 (exp -> exp + termino .)
    )               reduce using rule 35 (exp -> exp + termino .)
    *               shift and go to state 83
    /               shift and go to state 84


state 107

    (36) exp -> exp - termino .
    (38) termino -> termino . * factor
    (39) termino -> termino . / factor

    >               reduce using rule 36 (exp -> exp - termino .)
    <               reduce using rule 36 (exp -> exp - termino .)
    EQ              reduce using rule 36 (exp -> exp - termino .)
    GE              reduce using rule 36 (exp -> exp - termino .)
    LE              reduce using rule 36 (exp -> exp - termino .)
    NE              reduce using rule 36 (exp -> exp - termino .)
    +               reduce using rule 36 (exp -> exp - termino .)
    -               reduce using rule 36 (exp -> exp - termino .)
    ;               reduce using rule 36 (exp -> exp - termino .)
    ,               reduce using rule 36 (exp -> exp - termino .)
    )               reduce using rule 36 (exp -> exp - termino .)
    *               shift and go to state 83
    /               shift and go to state 84


state 108

    (38) termino -> termino * factor .

    *               reduce using rule 38 (termino -> termino * factor .)
    /               reduce using rule 38 (termino -> termino * factor .)
    >               reduce using rule 38 (termino -> termino * factor .)
    <               reduce using rule 38 (termino -> termino * factor .)
    EQ              reduce using rule 38 (termino -> termino * factor .)
    GE              reduce using rule 38 (termino -> termino * factor .)
    LE              reduce using rule 38 (termino -> termino * factor .)
    NE              reduce using rule 38 (termino -> termino * factor .)
    +               reduce using rule 38 (termino -> termino * factor .)
    -               reduce using rule 38 (termino -> termino * factor .)
    ;               reduce using rule 38 (termino -> termino * factor .)
    ,               reduce using rule 38 (termino -> termino * factor .)
    )               reduce using rule 38 (termino -> termino * factor .)


state 109

    (39) termino -> termino / factor .

    *               reduce using rule 39 (termino -> termino / factor .)
    /               reduce using rule 39 (termino -> termino / factor .)
    >               reduce using rule 39 (termino -> termino / factor .)
    <               reduce using rule 39 (termino -> termino / factor .)
    EQ              reduce using rule 39 (termino -> termino / factor .)
    GE              reduce using rule 39 (termino -> termino / factor .)
    LE              reduce using rule 39 (termino -> termino / factor .)
    NE              reduce using rule 39 (termino -> termino / factor .)
    +               reduce using rule 39 (termino -> termino / factor .)
    -               reduce using rule 39 (termino -> termino / factor .)
    ;               reduce using rule 39 (termino -> termino / factor .)
    ,               reduce using rule 39 (termino -> termino / factor .)
    )               reduce using rule 39 (termino -> termino / factor .)


state 110

    (41) factor -> ( expression ) .

    *               reduce using rule 41 (factor -> ( expression ) .)
    /               reduce using rule 41 (factor -> ( expression ) .)
    >               reduce using rule 41 (factor -> ( expression ) .)
    <               reduce using rule 41 (factor -> ( expression ) .)
    EQ              reduce using rule 41 (factor -> ( expression ) .)
    GE              reduce using rule 41 (factor -> ( expression ) .)
    LE              reduce using rule 41 (factor -> ( expression ) .)
    NE              reduce using rule 41 (factor -> ( expression ) .)
    +               reduce using rule 41 (factor -> ( expression ) .)
    -               reduce using rule 41 (factor -> ( expression ) .)
    ;               reduce using rule 41 (factor -> ( expression ) .)
    ,               reduce using rule 41 (factor -> ( expression ) .)
    )               reduce using rule 41 (factor -> ( expression ) .)


state 111

    (57) f_call -> ID ( expression f_call_ayuda ) . ;

    ;               shift and go to state 123


state 112

    (59) f_call_ayuda -> , expression . f_call_ayuda
    (59) f_call_ayuda -> . , expression f_call_ayuda
    (60) f_call_ayuda -> .

    ,               shift and go to state 89
    )               reduce using rule 60 (f_call_ayuda -> .)

    f_call_ayuda                   shift and go to state 124

state 113

    (25) condition -> IF ( expression ) body . ;
    (26) condition -> IF ( expression ) body . ELSE body ;

    ;               shift and go to state 125
    ELSE            shift and go to state 126


state 114

    (24) cycle -> DO body WHILE ( expression . ) ;

    )               shift and go to state 127


state 115

    (19) print -> PRINT ( expression print_ayuda ) . ;

    ;               shift and go to state 128


state 116

    (21) print_ayuda -> , expression . print_ayuda
    (21) print_ayuda -> . , expression print_ayuda
    (22) print_ayuda -> . , STRING print_ayuda
    (23) print_ayuda -> .

    ,               shift and go to state 94
    )               reduce using rule 23 (print_ayuda -> .)

    print_ayuda                    shift and go to state 129

state 117

    (22) print_ayuda -> , STRING . print_ayuda
    (21) print_ayuda -> . , expression print_ayuda
    (22) print_ayuda -> . , STRING print_ayuda
    (23) print_ayuda -> .

    ,               shift and go to state 94
    )               reduce using rule 23 (print_ayuda -> .)

    print_ayuda                    shift and go to state 130

state 118

    (20) print -> PRINT ( STRING print_ayuda ) . ;

    ;               shift and go to state 131


state 119

    (49) funcs -> VOID ID ( ID : type funcs_ayuda ) . [ vars body ] ;
    (51) funcs -> VOID ID ( ID : type funcs_ayuda ) . [ body ] ;

    [               shift and go to state 132


state 120

    (55) funcs_ayuda -> , ID . : type funcs_ayuda

    :               shift and go to state 133


state 121

    (50) funcs -> VOID ID ( ) [ vars body ] . ;

    ;               shift and go to state 134


state 122

    (52) funcs -> VOID ID ( ) [ body ] ; .

    MAIN            reduce using rule 52 (funcs -> VOID ID ( ) [ body ] ; .)
    VOID            reduce using rule 52 (funcs -> VOID ID ( ) [ body ] ; .)


state 123

    (57) f_call -> ID ( expression f_call_ayuda ) ; .

    }               reduce using rule 57 (f_call -> ID ( expression f_call_ayuda ) ; .)
    ID              reduce using rule 57 (f_call -> ID ( expression f_call_ayuda ) ; .)
    IF              reduce using rule 57 (f_call -> ID ( expression f_call_ayuda ) ; .)
    DO              reduce using rule 57 (f_call -> ID ( expression f_call_ayuda ) ; .)
    PRINT           reduce using rule 57 (f_call -> ID ( expression f_call_ayuda ) ; .)


state 124

    (59) f_call_ayuda -> , expression f_call_ayuda .

    )               reduce using rule 59 (f_call_ayuda -> , expression f_call_ayuda .)


state 125

    (25) condition -> IF ( expression ) body ; .

    }               reduce using rule 25 (condition -> IF ( expression ) body ; .)
    ID              reduce using rule 25 (condition -> IF ( expression ) body ; .)
    IF              reduce using rule 25 (condition -> IF ( expression ) body ; .)
    DO              reduce using rule 25 (condition -> IF ( expression ) body ; .)
    PRINT           reduce using rule 25 (condition -> IF ( expression ) body ; .)


state 126

    (26) condition -> IF ( expression ) body ELSE . body ;
    (11) body -> . { statements }

    {               shift and go to state 19

    body                           shift and go to state 135

state 127

    (24) cycle -> DO body WHILE ( expression ) . ;

    ;               shift and go to state 136


state 128

    (19) print -> PRINT ( expression print_ayuda ) ; .

    }               reduce using rule 19 (print -> PRINT ( expression print_ayuda ) ; .)
    ID              reduce using rule 19 (print -> PRINT ( expression print_ayuda ) ; .)
    IF              reduce using rule 19 (print -> PRINT ( expression print_ayuda ) ; .)
    DO              reduce using rule 19 (print -> PRINT ( expression print_ayuda ) ; .)
    PRINT           reduce using rule 19 (print -> PRINT ( expression print_ayuda ) ; .)


state 129

    (21) print_ayuda -> , expression print_ayuda .

    )               reduce using rule 21 (print_ayuda -> , expression print_ayuda .)


state 130

    (22) print_ayuda -> , STRING print_ayuda .

    )               reduce using rule 22 (print_ayuda -> , STRING print_ayuda .)


state 131

    (20) print -> PRINT ( STRING print_ayuda ) ; .

    }               reduce using rule 20 (print -> PRINT ( STRING print_ayuda ) ; .)
    ID              reduce using rule 20 (print -> PRINT ( STRING print_ayuda ) ; .)
    IF              reduce using rule 20 (print -> PRINT ( STRING print_ayuda ) ; .)
    DO              reduce using rule 20 (print -> PRINT ( STRING print_ayuda ) ; .)
    PRINT           reduce using rule 20 (print -> PRINT ( STRING print_ayuda ) ; .)


state 132

    (49) funcs -> VOID ID ( ID : type funcs_ayuda ) [ . vars body ] ;
    (51) funcs -> VOID ID ( ID : type funcs_ayuda ) [ . body ] ;
    (2) vars -> . vars VAR var_ayuda
    (3) vars -> . VAR var_ayuda
    (11) body -> . { statements }

    VAR             shift and go to state 6
    {               shift and go to state 19

    vars                           shift and go to state 137
    body                           shift and go to state 138

state 133

    (55) funcs_ayuda -> , ID : . type funcs_ayuda
    (9) type -> . INT
    (10) type -> . FLOAT

    INT             shift and go to state 38
    FLOAT           shift and go to state 39

    type                           shift and go to state 139

state 134

    (50) funcs -> VOID ID ( ) [ vars body ] ; .

    MAIN            reduce using rule 50 (funcs -> VOID ID ( ) [ vars body ] ; .)
    VOID            reduce using rule 50 (funcs -> VOID ID ( ) [ vars body ] ; .)


state 135

    (26) condition -> IF ( expression ) body ELSE body . ;

    ;               shift and go to state 140


state 136

    (24) cycle -> DO body WHILE ( expression ) ; .

    }               reduce using rule 24 (cycle -> DO body WHILE ( expression ) ; .)
    ID              reduce using rule 24 (cycle -> DO body WHILE ( expression ) ; .)
    IF              reduce using rule 24 (cycle -> DO body WHILE ( expression ) ; .)
    DO              reduce using rule 24 (cycle -> DO body WHILE ( expression ) ; .)
    PRINT           reduce using rule 24 (cycle -> DO body WHILE ( expression ) ; .)


state 137

    (49) funcs -> VOID ID ( ID : type funcs_ayuda ) [ vars . body ] ;
    (2) vars -> vars . VAR var_ayuda
    (11) body -> . { statements }

    VAR             shift and go to state 8
    {               shift and go to state 19

    body                           shift and go to state 141

state 138

    (51) funcs -> VOID ID ( ID : type funcs_ayuda ) [ body . ] ;

    ]               shift and go to state 142


state 139

    (55) funcs_ayuda -> , ID : type . funcs_ayuda
    (55) funcs_ayuda -> . , ID : type funcs_ayuda
    (56) funcs_ayuda -> .

    ,               shift and go to state 97
    )               reduce using rule 56 (funcs_ayuda -> .)

    funcs_ayuda                    shift and go to state 143

state 140

    (26) condition -> IF ( expression ) body ELSE body ; .

    }               reduce using rule 26 (condition -> IF ( expression ) body ELSE body ; .)
    ID              reduce using rule 26 (condition -> IF ( expression ) body ELSE body ; .)
    IF              reduce using rule 26 (condition -> IF ( expression ) body ELSE body ; .)
    DO              reduce using rule 26 (condition -> IF ( expression ) body ELSE body ; .)
    PRINT           reduce using rule 26 (condition -> IF ( expression ) body ELSE body ; .)


state 141

    (49) funcs -> VOID ID ( ID : type funcs_ayuda ) [ vars body . ] ;

    ]               shift and go to state 144


state 142

    (51) funcs -> VOID ID ( ID : type funcs_ayuda ) [ body ] . ;

    ;               shift and go to state 145


state 143

    (55) funcs_ayuda -> , ID : type funcs_ayuda .

    )               reduce using rule 55 (funcs_ayuda -> , ID : type funcs_ayuda .)


state 144

    (49) funcs -> VOID ID ( ID : type funcs_ayuda ) [ vars body ] . ;

    ;               shift and go to state 146


state 145

    (51) funcs -> VOID ID ( ID : type funcs_ayuda ) [ body ] ; .

    MAIN            reduce using rule 51 (funcs -> VOID ID ( ID : type funcs_ayuda ) [ body ] ; .)
    VOID            reduce using rule 51 (funcs -> VOID ID ( ID : type funcs_ayuda ) [ body ] ; .)


state 146

    (49) funcs -> VOID ID ( ID : type funcs_ayuda ) [ vars body ] ; .

    MAIN            reduce using rule 49 (funcs -> VOID ID ( ID : type funcs_ayuda ) [ vars body ] ; .)
    VOID            reduce using rule 49 (funcs -> VOID ID ( ID : type funcs_ayuda ) [ vars body ] ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VOID in state 5 resolved as shift
WARNING: shift/reduce conflict for VOID in state 7 resolved as shift
WARNING: shift/reduce conflict for MAIN in state 7 resolved as shift
WARNING: shift/reduce conflict for VOID in state 12 resolved as shift
WARNING: shift/reduce conflict for VOID in state 12 resolved as shift
WARNING: reduce/reduce conflict in state 12 resolved using rule (funcs -> funcs funcs)
WARNING: rejected rule (funcs -> <empty>) in state 12
