Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     type -> INT
Rule 3     type -> FLOAT
Rule 4     vars -> VAR var_ayuda
Rule 5     var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail
Rule 6     var_ayuda_tail -> var_ayuda
Rule 7     var_ayuda_tail -> empty
Rule 8     var_doble_ayuda -> , ID var_doble_ayuda
Rule 9     var_doble_ayuda -> empty
Rule 10    exp -> exp + termino
Rule 11    exp -> exp - termino
Rule 12    exp -> termino
Rule 13    expression -> exp > exp
Rule 14    expression -> exp < exp
Rule 15    expression -> exp EQ exp
Rule 16    expression -> exp GE exp
Rule 17    expression -> exp LE exp
Rule 18    expression -> exp NE exp
Rule 19    expression -> exp
Rule 20    factor -> ( expression )
Rule 21    factor -> ID
Rule 22    factor -> cte
Rule 23    factor -> + ID
Rule 24    factor -> - ID
Rule 25    factor -> + cte
Rule 26    factor -> - cte
Rule 27    print -> PRINT ( expression print_ayuda ) ;
Rule 28    print -> PRINT ( CONST_STRING print_ayuda ) ;
Rule 29    print_ayuda -> , expression print_ayuda
Rule 30    print_ayuda -> , STRING print_ayuda
Rule 31    print_ayuda -> empty
Rule 32    termino -> termino * factor
Rule 33    termino -> termino / factor
Rule 34    termino -> factor
Rule 35    cycle -> DO body WHILE ( expression ) ;
Rule 36    condition -> IF ( expression ) marcar_if_inicio body ;
Rule 37    marcar_if_inicio -> <empty>
Rule 38    condition -> IF ( expression ) marcar_if_else_inicio body marcar_else_inicio ELSE body ;
Rule 39    marcar_if_else_inicio -> <empty>
Rule 40    marcar_else_inicio -> <empty>
Rule 41    assign -> ID = expression ;
Rule 42    f_call -> ID ( expression f_call_ayuda ) ;
Rule 43    f_call -> ID ( ) ;
Rule 44    f_call_ayuda -> , expression f_call_ayuda
Rule 45    f_call_ayuda -> empty
Rule 46    statements -> statements statement
Rule 47    statements -> statement
Rule 48    statement -> assign
Rule 49    statement -> condition
Rule 50    statement -> cycle
Rule 51    statement -> f_call
Rule 52    statement -> print
Rule 53    body -> { statements }
Rule 54    cte -> CONST_INT
Rule 55    cte -> CONST_FLOAT
Rule 56    func -> VOID ID ( ID : type funcs_ayuda ) func_start [ vars body ] ;
Rule 57    func -> VOID ID ( ) func_start [ vars body ] ;
Rule 58    func -> VOID ID ( ID : type funcs_ayuda ) func_start [ body ] ;
Rule 59    func -> VOID ID ( ) func_start [ body ] ;
Rule 60    func_start -> <empty>
Rule 61    funcs_list -> funcs_list func
Rule 62    funcs_list -> func
Rule 63    funcs_list -> empty
Rule 64    funcs_ayuda -> , ID : type funcs_ayuda
Rule 65    funcs_ayuda -> empty
Rule 66    program -> PROGRAM ID ; vars funcs_list MAIN inicio_main body END
Rule 67    inicio_main -> <empty>

Terminals, with rules where they appear

(                    : 20 27 28 35 36 38 42 43 56 57 58 59
)                    : 20 27 28 35 36 38 42 43 56 57 58 59
*                    : 32
+                    : 10 23 25
,                    : 8 29 30 44 64
-                    : 11 24 26
/                    : 33
:                    : 5 56 58 64
;                    : 5 27 28 35 36 38 41 42 43 56 57 58 59 66
<                    : 14
=                    : 41
>                    : 13
CONST_FLOAT          : 55
CONST_INT            : 54
CONST_STRING         : 28
DO                   : 35
ELSE                 : 38
END                  : 66
EQ                   : 15
FLOAT                : 3
GE                   : 16
ID                   : 5 8 21 23 24 41 42 43 56 56 57 58 58 59 64 66
IF                   : 36 38
INT                  : 2
LE                   : 17
MAIN                 : 66
NE                   : 18
PRINT                : 27 28
PROGRAM              : 66
STRING               : 30
VAR                  : 4
VOID                 : 56 57 58 59
WHILE                : 35
[                    : 56 57 58 59
]                    : 56 57 58 59
error                : 
{                    : 53
}                    : 53

Nonterminals, with rules where they appear

assign               : 48
body                 : 35 36 38 38 56 57 58 59 66
condition            : 49
cte                  : 22 25 26
cycle                : 50
empty                : 7 9 31 45 63 65
exp                  : 10 11 13 13 14 14 15 15 16 16 17 17 18 18 19
expression           : 20 27 29 35 36 38 41 42 44
f_call               : 51
f_call_ayuda         : 42 44
factor               : 32 33 34
func                 : 61 62
func_start           : 56 57 58 59
funcs_ayuda          : 56 58 64
funcs_list           : 61 66
inicio_main          : 66
marcar_else_inicio   : 38
marcar_if_else_inicio : 38
marcar_if_inicio     : 36
print                : 52
print_ayuda          : 27 28 29 30
program              : 0
statement            : 46 47
statements           : 46 53
termino              : 10 11 12 32 33
type                 : 5 56 58 64
var_ayuda            : 4 6
var_ayuda_tail       : 5
var_doble_ayuda      : 5 8
vars                 : 56 57 66

Parsing method: LALR

state 0

    (0) S' -> . program
    (66) program -> . PROGRAM ID ; vars funcs_list MAIN inicio_main body END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (66) program -> PROGRAM . ID ; vars funcs_list MAIN inicio_main body END

    ID              shift and go to state 3


state 3

    (66) program -> PROGRAM ID . ; vars funcs_list MAIN inicio_main body END

    ;               shift and go to state 4


state 4

    (66) program -> PROGRAM ID ; . vars funcs_list MAIN inicio_main body END
    (4) vars -> . VAR var_ayuda

    VAR             shift and go to state 6

    vars                           shift and go to state 5

state 5

    (66) program -> PROGRAM ID ; vars . funcs_list MAIN inicio_main body END
    (61) funcs_list -> . funcs_list func
    (62) funcs_list -> . func
    (63) funcs_list -> . empty
    (56) func -> . VOID ID ( ID : type funcs_ayuda ) func_start [ vars body ] ;
    (57) func -> . VOID ID ( ) func_start [ vars body ] ;
    (58) func -> . VOID ID ( ID : type funcs_ayuda ) func_start [ body ] ;
    (59) func -> . VOID ID ( ) func_start [ body ] ;
    (1) empty -> .

  ! shift/reduce conflict for VOID resolved as shift
    VOID            shift and go to state 10
    MAIN            reduce using rule 1 (empty -> .)

  ! VOID            [ reduce using rule 1 (empty -> .) ]

    funcs_list                     shift and go to state 7
    func                           shift and go to state 8
    empty                          shift and go to state 9

state 6

    (4) vars -> VAR . var_ayuda
    (5) var_ayuda -> . ID var_doble_ayuda : type ; var_ayuda_tail

    ID              shift and go to state 12

    var_ayuda                      shift and go to state 11

state 7

    (66) program -> PROGRAM ID ; vars funcs_list . MAIN inicio_main body END
    (61) funcs_list -> funcs_list . func
    (56) func -> . VOID ID ( ID : type funcs_ayuda ) func_start [ vars body ] ;
    (57) func -> . VOID ID ( ) func_start [ vars body ] ;
    (58) func -> . VOID ID ( ID : type funcs_ayuda ) func_start [ body ] ;
    (59) func -> . VOID ID ( ) func_start [ body ] ;

    MAIN            shift and go to state 13
    VOID            shift and go to state 10

    func                           shift and go to state 14

state 8

    (62) funcs_list -> func .

    MAIN            reduce using rule 62 (funcs_list -> func .)
    VOID            reduce using rule 62 (funcs_list -> func .)


state 9

    (63) funcs_list -> empty .

    MAIN            reduce using rule 63 (funcs_list -> empty .)
    VOID            reduce using rule 63 (funcs_list -> empty .)


state 10

    (56) func -> VOID . ID ( ID : type funcs_ayuda ) func_start [ vars body ] ;
    (57) func -> VOID . ID ( ) func_start [ vars body ] ;
    (58) func -> VOID . ID ( ID : type funcs_ayuda ) func_start [ body ] ;
    (59) func -> VOID . ID ( ) func_start [ body ] ;

    ID              shift and go to state 15


state 11

    (4) vars -> VAR var_ayuda .

    VOID            reduce using rule 4 (vars -> VAR var_ayuda .)
    MAIN            reduce using rule 4 (vars -> VAR var_ayuda .)
    {               reduce using rule 4 (vars -> VAR var_ayuda .)


state 12

    (5) var_ayuda -> ID . var_doble_ayuda : type ; var_ayuda_tail
    (8) var_doble_ayuda -> . , ID var_doble_ayuda
    (9) var_doble_ayuda -> . empty
    (1) empty -> .

    ,               shift and go to state 17
    :               reduce using rule 1 (empty -> .)

    var_doble_ayuda                shift and go to state 16
    empty                          shift and go to state 18

state 13

    (66) program -> PROGRAM ID ; vars funcs_list MAIN . inicio_main body END
    (67) inicio_main -> .

    {               reduce using rule 67 (inicio_main -> .)

    inicio_main                    shift and go to state 19

state 14

    (61) funcs_list -> funcs_list func .

    MAIN            reduce using rule 61 (funcs_list -> funcs_list func .)
    VOID            reduce using rule 61 (funcs_list -> funcs_list func .)


state 15

    (56) func -> VOID ID . ( ID : type funcs_ayuda ) func_start [ vars body ] ;
    (57) func -> VOID ID . ( ) func_start [ vars body ] ;
    (58) func -> VOID ID . ( ID : type funcs_ayuda ) func_start [ body ] ;
    (59) func -> VOID ID . ( ) func_start [ body ] ;

    (               shift and go to state 20


state 16

    (5) var_ayuda -> ID var_doble_ayuda . : type ; var_ayuda_tail

    :               shift and go to state 21


state 17

    (8) var_doble_ayuda -> , . ID var_doble_ayuda

    ID              shift and go to state 22


state 18

    (9) var_doble_ayuda -> empty .

    :               reduce using rule 9 (var_doble_ayuda -> empty .)


state 19

    (66) program -> PROGRAM ID ; vars funcs_list MAIN inicio_main . body END
    (53) body -> . { statements }

    {               shift and go to state 24

    body                           shift and go to state 23

state 20

    (56) func -> VOID ID ( . ID : type funcs_ayuda ) func_start [ vars body ] ;
    (57) func -> VOID ID ( . ) func_start [ vars body ] ;
    (58) func -> VOID ID ( . ID : type funcs_ayuda ) func_start [ body ] ;
    (59) func -> VOID ID ( . ) func_start [ body ] ;

    ID              shift and go to state 25
    )               shift and go to state 26


state 21

    (5) var_ayuda -> ID var_doble_ayuda : . type ; var_ayuda_tail
    (2) type -> . INT
    (3) type -> . FLOAT

    INT             shift and go to state 28
    FLOAT           shift and go to state 29

    type                           shift and go to state 27

state 22

    (8) var_doble_ayuda -> , ID . var_doble_ayuda
    (8) var_doble_ayuda -> . , ID var_doble_ayuda
    (9) var_doble_ayuda -> . empty
    (1) empty -> .

    ,               shift and go to state 17
    :               reduce using rule 1 (empty -> .)

    var_doble_ayuda                shift and go to state 30
    empty                          shift and go to state 18

state 23

    (66) program -> PROGRAM ID ; vars funcs_list MAIN inicio_main body . END

    END             shift and go to state 31


state 24

    (53) body -> { . statements }
    (46) statements -> . statements statement
    (47) statements -> . statement
    (48) statement -> . assign
    (49) statement -> . condition
    (50) statement -> . cycle
    (51) statement -> . f_call
    (52) statement -> . print
    (41) assign -> . ID = expression ;
    (36) condition -> . IF ( expression ) marcar_if_inicio body ;
    (38) condition -> . IF ( expression ) marcar_if_else_inicio body marcar_else_inicio ELSE body ;
    (35) cycle -> . DO body WHILE ( expression ) ;
    (42) f_call -> . ID ( expression f_call_ayuda ) ;
    (43) f_call -> . ID ( ) ;
    (27) print -> . PRINT ( expression print_ayuda ) ;
    (28) print -> . PRINT ( CONST_STRING print_ayuda ) ;

    ID              shift and go to state 39
    IF              shift and go to state 40
    DO              shift and go to state 41
    PRINT           shift and go to state 42

    statements                     shift and go to state 32
    statement                      shift and go to state 33
    assign                         shift and go to state 34
    condition                      shift and go to state 35
    cycle                          shift and go to state 36
    f_call                         shift and go to state 37
    print                          shift and go to state 38

state 25

    (56) func -> VOID ID ( ID . : type funcs_ayuda ) func_start [ vars body ] ;
    (58) func -> VOID ID ( ID . : type funcs_ayuda ) func_start [ body ] ;

    :               shift and go to state 43


state 26

    (57) func -> VOID ID ( ) . func_start [ vars body ] ;
    (59) func -> VOID ID ( ) . func_start [ body ] ;
    (60) func_start -> .

    [               reduce using rule 60 (func_start -> .)

    func_start                     shift and go to state 44

state 27

    (5) var_ayuda -> ID var_doble_ayuda : type . ; var_ayuda_tail

    ;               shift and go to state 45


state 28

    (2) type -> INT .

    ;               reduce using rule 2 (type -> INT .)
    ,               reduce using rule 2 (type -> INT .)
    )               reduce using rule 2 (type -> INT .)


state 29

    (3) type -> FLOAT .

    ;               reduce using rule 3 (type -> FLOAT .)
    ,               reduce using rule 3 (type -> FLOAT .)
    )               reduce using rule 3 (type -> FLOAT .)


state 30

    (8) var_doble_ayuda -> , ID var_doble_ayuda .

    :               reduce using rule 8 (var_doble_ayuda -> , ID var_doble_ayuda .)


state 31

    (66) program -> PROGRAM ID ; vars funcs_list MAIN inicio_main body END .

    $end            reduce using rule 66 (program -> PROGRAM ID ; vars funcs_list MAIN inicio_main body END .)


state 32

    (53) body -> { statements . }
    (46) statements -> statements . statement
    (48) statement -> . assign
    (49) statement -> . condition
    (50) statement -> . cycle
    (51) statement -> . f_call
    (52) statement -> . print
    (41) assign -> . ID = expression ;
    (36) condition -> . IF ( expression ) marcar_if_inicio body ;
    (38) condition -> . IF ( expression ) marcar_if_else_inicio body marcar_else_inicio ELSE body ;
    (35) cycle -> . DO body WHILE ( expression ) ;
    (42) f_call -> . ID ( expression f_call_ayuda ) ;
    (43) f_call -> . ID ( ) ;
    (27) print -> . PRINT ( expression print_ayuda ) ;
    (28) print -> . PRINT ( CONST_STRING print_ayuda ) ;

    }               shift and go to state 46
    ID              shift and go to state 39
    IF              shift and go to state 40
    DO              shift and go to state 41
    PRINT           shift and go to state 42

    statement                      shift and go to state 47
    assign                         shift and go to state 34
    condition                      shift and go to state 35
    cycle                          shift and go to state 36
    f_call                         shift and go to state 37
    print                          shift and go to state 38

state 33

    (47) statements -> statement .

    }               reduce using rule 47 (statements -> statement .)
    ID              reduce using rule 47 (statements -> statement .)
    IF              reduce using rule 47 (statements -> statement .)
    DO              reduce using rule 47 (statements -> statement .)
    PRINT           reduce using rule 47 (statements -> statement .)


state 34

    (48) statement -> assign .

    }               reduce using rule 48 (statement -> assign .)
    ID              reduce using rule 48 (statement -> assign .)
    IF              reduce using rule 48 (statement -> assign .)
    DO              reduce using rule 48 (statement -> assign .)
    PRINT           reduce using rule 48 (statement -> assign .)


state 35

    (49) statement -> condition .

    }               reduce using rule 49 (statement -> condition .)
    ID              reduce using rule 49 (statement -> condition .)
    IF              reduce using rule 49 (statement -> condition .)
    DO              reduce using rule 49 (statement -> condition .)
    PRINT           reduce using rule 49 (statement -> condition .)


state 36

    (50) statement -> cycle .

    }               reduce using rule 50 (statement -> cycle .)
    ID              reduce using rule 50 (statement -> cycle .)
    IF              reduce using rule 50 (statement -> cycle .)
    DO              reduce using rule 50 (statement -> cycle .)
    PRINT           reduce using rule 50 (statement -> cycle .)


state 37

    (51) statement -> f_call .

    }               reduce using rule 51 (statement -> f_call .)
    ID              reduce using rule 51 (statement -> f_call .)
    IF              reduce using rule 51 (statement -> f_call .)
    DO              reduce using rule 51 (statement -> f_call .)
    PRINT           reduce using rule 51 (statement -> f_call .)


state 38

    (52) statement -> print .

    }               reduce using rule 52 (statement -> print .)
    ID              reduce using rule 52 (statement -> print .)
    IF              reduce using rule 52 (statement -> print .)
    DO              reduce using rule 52 (statement -> print .)
    PRINT           reduce using rule 52 (statement -> print .)


state 39

    (41) assign -> ID . = expression ;
    (42) f_call -> ID . ( expression f_call_ayuda ) ;
    (43) f_call -> ID . ( ) ;

    =               shift and go to state 48
    (               shift and go to state 49


state 40

    (36) condition -> IF . ( expression ) marcar_if_inicio body ;
    (38) condition -> IF . ( expression ) marcar_if_else_inicio body marcar_else_inicio ELSE body ;

    (               shift and go to state 50


state 41

    (35) cycle -> DO . body WHILE ( expression ) ;
    (53) body -> . { statements }

    {               shift and go to state 24

    body                           shift and go to state 51

state 42

    (27) print -> PRINT . ( expression print_ayuda ) ;
    (28) print -> PRINT . ( CONST_STRING print_ayuda ) ;

    (               shift and go to state 52


state 43

    (56) func -> VOID ID ( ID : . type funcs_ayuda ) func_start [ vars body ] ;
    (58) func -> VOID ID ( ID : . type funcs_ayuda ) func_start [ body ] ;
    (2) type -> . INT
    (3) type -> . FLOAT

    INT             shift and go to state 28
    FLOAT           shift and go to state 29

    type                           shift and go to state 53

state 44

    (57) func -> VOID ID ( ) func_start . [ vars body ] ;
    (59) func -> VOID ID ( ) func_start . [ body ] ;

    [               shift and go to state 54


state 45

    (5) var_ayuda -> ID var_doble_ayuda : type ; . var_ayuda_tail
    (6) var_ayuda_tail -> . var_ayuda
    (7) var_ayuda_tail -> . empty
    (5) var_ayuda -> . ID var_doble_ayuda : type ; var_ayuda_tail
    (1) empty -> .

    ID              shift and go to state 12
    VOID            reduce using rule 1 (empty -> .)
    MAIN            reduce using rule 1 (empty -> .)
    {               reduce using rule 1 (empty -> .)

    var_ayuda_tail                 shift and go to state 55
    var_ayuda                      shift and go to state 56
    empty                          shift and go to state 57

state 46

    (53) body -> { statements } .

    END             reduce using rule 53 (body -> { statements } .)
    WHILE           reduce using rule 53 (body -> { statements } .)
    ]               reduce using rule 53 (body -> { statements } .)
    ;               reduce using rule 53 (body -> { statements } .)
    ELSE            reduce using rule 53 (body -> { statements } .)


state 47

    (46) statements -> statements statement .

    }               reduce using rule 46 (statements -> statements statement .)
    ID              reduce using rule 46 (statements -> statements statement .)
    IF              reduce using rule 46 (statements -> statements statement .)
    DO              reduce using rule 46 (statements -> statements statement .)
    PRINT           reduce using rule 46 (statements -> statements statement .)


state 48

    (41) assign -> ID = . expression ;
    (13) expression -> . exp > exp
    (14) expression -> . exp < exp
    (15) expression -> . exp EQ exp
    (16) expression -> . exp GE exp
    (17) expression -> . exp LE exp
    (18) expression -> . exp NE exp
    (19) expression -> . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    expression                     shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 49

    (42) f_call -> ID ( . expression f_call_ayuda ) ;
    (43) f_call -> ID ( . ) ;
    (13) expression -> . exp > exp
    (14) expression -> . exp < exp
    (15) expression -> . exp EQ exp
    (16) expression -> . exp GE exp
    (17) expression -> . exp LE exp
    (18) expression -> . exp NE exp
    (19) expression -> . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    )               shift and go to state 70
    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    expression                     shift and go to state 69
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 50

    (36) condition -> IF ( . expression ) marcar_if_inicio body ;
    (38) condition -> IF ( . expression ) marcar_if_else_inicio body marcar_else_inicio ELSE body ;
    (13) expression -> . exp > exp
    (14) expression -> . exp < exp
    (15) expression -> . exp EQ exp
    (16) expression -> . exp GE exp
    (17) expression -> . exp LE exp
    (18) expression -> . exp NE exp
    (19) expression -> . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    expression                     shift and go to state 71
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 51

    (35) cycle -> DO body . WHILE ( expression ) ;

    WHILE           shift and go to state 72


state 52

    (27) print -> PRINT ( . expression print_ayuda ) ;
    (28) print -> PRINT ( . CONST_STRING print_ayuda ) ;
    (13) expression -> . exp > exp
    (14) expression -> . exp < exp
    (15) expression -> . exp EQ exp
    (16) expression -> . exp GE exp
    (17) expression -> . exp LE exp
    (18) expression -> . exp NE exp
    (19) expression -> . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    CONST_STRING    shift and go to state 74
    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    expression                     shift and go to state 73
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 53

    (56) func -> VOID ID ( ID : type . funcs_ayuda ) func_start [ vars body ] ;
    (58) func -> VOID ID ( ID : type . funcs_ayuda ) func_start [ body ] ;
    (64) funcs_ayuda -> . , ID : type funcs_ayuda
    (65) funcs_ayuda -> . empty
    (1) empty -> .

    ,               shift and go to state 76
    )               reduce using rule 1 (empty -> .)

    funcs_ayuda                    shift and go to state 75
    empty                          shift and go to state 77

state 54

    (57) func -> VOID ID ( ) func_start [ . vars body ] ;
    (59) func -> VOID ID ( ) func_start [ . body ] ;
    (4) vars -> . VAR var_ayuda
    (53) body -> . { statements }

    VAR             shift and go to state 6
    {               shift and go to state 24

    vars                           shift and go to state 78
    body                           shift and go to state 79

state 55

    (5) var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail .

    VOID            reduce using rule 5 (var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail .)
    MAIN            reduce using rule 5 (var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail .)
    {               reduce using rule 5 (var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail .)


state 56

    (6) var_ayuda_tail -> var_ayuda .

    VOID            reduce using rule 6 (var_ayuda_tail -> var_ayuda .)
    MAIN            reduce using rule 6 (var_ayuda_tail -> var_ayuda .)
    {               reduce using rule 6 (var_ayuda_tail -> var_ayuda .)


state 57

    (7) var_ayuda_tail -> empty .

    VOID            reduce using rule 7 (var_ayuda_tail -> empty .)
    MAIN            reduce using rule 7 (var_ayuda_tail -> empty .)
    {               reduce using rule 7 (var_ayuda_tail -> empty .)


state 58

    (21) factor -> ID .

    *               reduce using rule 21 (factor -> ID .)
    /               reduce using rule 21 (factor -> ID .)
    >               reduce using rule 21 (factor -> ID .)
    <               reduce using rule 21 (factor -> ID .)
    EQ              reduce using rule 21 (factor -> ID .)
    GE              reduce using rule 21 (factor -> ID .)
    LE              reduce using rule 21 (factor -> ID .)
    NE              reduce using rule 21 (factor -> ID .)
    +               reduce using rule 21 (factor -> ID .)
    -               reduce using rule 21 (factor -> ID .)
    ;               reduce using rule 21 (factor -> ID .)
    ,               reduce using rule 21 (factor -> ID .)
    )               reduce using rule 21 (factor -> ID .)


state 59

    (41) assign -> ID = expression . ;

    ;               shift and go to state 80


state 60

    (13) expression -> exp . > exp
    (14) expression -> exp . < exp
    (15) expression -> exp . EQ exp
    (16) expression -> exp . GE exp
    (17) expression -> exp . LE exp
    (18) expression -> exp . NE exp
    (19) expression -> exp .
    (10) exp -> exp . + termino
    (11) exp -> exp . - termino

    >               shift and go to state 81
    <               shift and go to state 82
    EQ              shift and go to state 83
    GE              shift and go to state 84
    LE              shift and go to state 85
    NE              shift and go to state 86
    ;               reduce using rule 19 (expression -> exp .)
    ,               reduce using rule 19 (expression -> exp .)
    )               reduce using rule 19 (expression -> exp .)
    +               shift and go to state 87
    -               shift and go to state 88


state 61

    (23) factor -> + . ID
    (25) factor -> + . cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    ID              shift and go to state 89
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    cte                            shift and go to state 90

state 62

    (12) exp -> termino .
    (32) termino -> termino . * factor
    (33) termino -> termino . / factor

    >               reduce using rule 12 (exp -> termino .)
    <               reduce using rule 12 (exp -> termino .)
    EQ              reduce using rule 12 (exp -> termino .)
    GE              reduce using rule 12 (exp -> termino .)
    LE              reduce using rule 12 (exp -> termino .)
    NE              reduce using rule 12 (exp -> termino .)
    +               reduce using rule 12 (exp -> termino .)
    -               reduce using rule 12 (exp -> termino .)
    ;               reduce using rule 12 (exp -> termino .)
    ,               reduce using rule 12 (exp -> termino .)
    )               reduce using rule 12 (exp -> termino .)
    *               shift and go to state 91
    /               shift and go to state 92


state 63

    (24) factor -> - . ID
    (26) factor -> - . cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    ID              shift and go to state 93
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    cte                            shift and go to state 94

state 64

    (34) termino -> factor .

    *               reduce using rule 34 (termino -> factor .)
    /               reduce using rule 34 (termino -> factor .)
    >               reduce using rule 34 (termino -> factor .)
    <               reduce using rule 34 (termino -> factor .)
    EQ              reduce using rule 34 (termino -> factor .)
    GE              reduce using rule 34 (termino -> factor .)
    LE              reduce using rule 34 (termino -> factor .)
    NE              reduce using rule 34 (termino -> factor .)
    +               reduce using rule 34 (termino -> factor .)
    -               reduce using rule 34 (termino -> factor .)
    ;               reduce using rule 34 (termino -> factor .)
    ,               reduce using rule 34 (termino -> factor .)
    )               reduce using rule 34 (termino -> factor .)


state 65

    (20) factor -> ( . expression )
    (13) expression -> . exp > exp
    (14) expression -> . exp < exp
    (15) expression -> . exp EQ exp
    (16) expression -> . exp GE exp
    (17) expression -> . exp LE exp
    (18) expression -> . exp NE exp
    (19) expression -> . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    expression                     shift and go to state 95
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 66

    (22) factor -> cte .

    *               reduce using rule 22 (factor -> cte .)
    /               reduce using rule 22 (factor -> cte .)
    >               reduce using rule 22 (factor -> cte .)
    <               reduce using rule 22 (factor -> cte .)
    EQ              reduce using rule 22 (factor -> cte .)
    GE              reduce using rule 22 (factor -> cte .)
    LE              reduce using rule 22 (factor -> cte .)
    NE              reduce using rule 22 (factor -> cte .)
    +               reduce using rule 22 (factor -> cte .)
    -               reduce using rule 22 (factor -> cte .)
    ;               reduce using rule 22 (factor -> cte .)
    ,               reduce using rule 22 (factor -> cte .)
    )               reduce using rule 22 (factor -> cte .)


state 67

    (54) cte -> CONST_INT .

    *               reduce using rule 54 (cte -> CONST_INT .)
    /               reduce using rule 54 (cte -> CONST_INT .)
    >               reduce using rule 54 (cte -> CONST_INT .)
    <               reduce using rule 54 (cte -> CONST_INT .)
    EQ              reduce using rule 54 (cte -> CONST_INT .)
    GE              reduce using rule 54 (cte -> CONST_INT .)
    LE              reduce using rule 54 (cte -> CONST_INT .)
    NE              reduce using rule 54 (cte -> CONST_INT .)
    +               reduce using rule 54 (cte -> CONST_INT .)
    -               reduce using rule 54 (cte -> CONST_INT .)
    ;               reduce using rule 54 (cte -> CONST_INT .)
    ,               reduce using rule 54 (cte -> CONST_INT .)
    )               reduce using rule 54 (cte -> CONST_INT .)


state 68

    (55) cte -> CONST_FLOAT .

    *               reduce using rule 55 (cte -> CONST_FLOAT .)
    /               reduce using rule 55 (cte -> CONST_FLOAT .)
    >               reduce using rule 55 (cte -> CONST_FLOAT .)
    <               reduce using rule 55 (cte -> CONST_FLOAT .)
    EQ              reduce using rule 55 (cte -> CONST_FLOAT .)
    GE              reduce using rule 55 (cte -> CONST_FLOAT .)
    LE              reduce using rule 55 (cte -> CONST_FLOAT .)
    NE              reduce using rule 55 (cte -> CONST_FLOAT .)
    +               reduce using rule 55 (cte -> CONST_FLOAT .)
    -               reduce using rule 55 (cte -> CONST_FLOAT .)
    ;               reduce using rule 55 (cte -> CONST_FLOAT .)
    ,               reduce using rule 55 (cte -> CONST_FLOAT .)
    )               reduce using rule 55 (cte -> CONST_FLOAT .)


state 69

    (42) f_call -> ID ( expression . f_call_ayuda ) ;
    (44) f_call_ayuda -> . , expression f_call_ayuda
    (45) f_call_ayuda -> . empty
    (1) empty -> .

    ,               shift and go to state 97
    )               reduce using rule 1 (empty -> .)

    f_call_ayuda                   shift and go to state 96
    empty                          shift and go to state 98

state 70

    (43) f_call -> ID ( ) . ;

    ;               shift and go to state 99


state 71

    (36) condition -> IF ( expression . ) marcar_if_inicio body ;
    (38) condition -> IF ( expression . ) marcar_if_else_inicio body marcar_else_inicio ELSE body ;

    )               shift and go to state 100


state 72

    (35) cycle -> DO body WHILE . ( expression ) ;

    (               shift and go to state 101


state 73

    (27) print -> PRINT ( expression . print_ayuda ) ;
    (29) print_ayuda -> . , expression print_ayuda
    (30) print_ayuda -> . , STRING print_ayuda
    (31) print_ayuda -> . empty
    (1) empty -> .

    ,               shift and go to state 103
    )               reduce using rule 1 (empty -> .)

    print_ayuda                    shift and go to state 102
    empty                          shift and go to state 104

state 74

    (28) print -> PRINT ( CONST_STRING . print_ayuda ) ;
    (29) print_ayuda -> . , expression print_ayuda
    (30) print_ayuda -> . , STRING print_ayuda
    (31) print_ayuda -> . empty
    (1) empty -> .

    ,               shift and go to state 103
    )               reduce using rule 1 (empty -> .)

    print_ayuda                    shift and go to state 105
    empty                          shift and go to state 104

state 75

    (56) func -> VOID ID ( ID : type funcs_ayuda . ) func_start [ vars body ] ;
    (58) func -> VOID ID ( ID : type funcs_ayuda . ) func_start [ body ] ;

    )               shift and go to state 106


state 76

    (64) funcs_ayuda -> , . ID : type funcs_ayuda

    ID              shift and go to state 107


state 77

    (65) funcs_ayuda -> empty .

    )               reduce using rule 65 (funcs_ayuda -> empty .)


state 78

    (57) func -> VOID ID ( ) func_start [ vars . body ] ;
    (53) body -> . { statements }

    {               shift and go to state 24

    body                           shift and go to state 108

state 79

    (59) func -> VOID ID ( ) func_start [ body . ] ;

    ]               shift and go to state 109


state 80

    (41) assign -> ID = expression ; .

    }               reduce using rule 41 (assign -> ID = expression ; .)
    ID              reduce using rule 41 (assign -> ID = expression ; .)
    IF              reduce using rule 41 (assign -> ID = expression ; .)
    DO              reduce using rule 41 (assign -> ID = expression ; .)
    PRINT           reduce using rule 41 (assign -> ID = expression ; .)


state 81

    (13) expression -> exp > . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    exp                            shift and go to state 110
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 82

    (14) expression -> exp < . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    exp                            shift and go to state 111
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 83

    (15) expression -> exp EQ . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    exp                            shift and go to state 112
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 84

    (16) expression -> exp GE . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    exp                            shift and go to state 113
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 85

    (17) expression -> exp LE . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    exp                            shift and go to state 114
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 86

    (18) expression -> exp NE . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    exp                            shift and go to state 115
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 87

    (10) exp -> exp + . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    termino                        shift and go to state 116
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 88

    (11) exp -> exp - . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    termino                        shift and go to state 117
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 89

    (23) factor -> + ID .

    *               reduce using rule 23 (factor -> + ID .)
    /               reduce using rule 23 (factor -> + ID .)
    >               reduce using rule 23 (factor -> + ID .)
    <               reduce using rule 23 (factor -> + ID .)
    EQ              reduce using rule 23 (factor -> + ID .)
    GE              reduce using rule 23 (factor -> + ID .)
    LE              reduce using rule 23 (factor -> + ID .)
    NE              reduce using rule 23 (factor -> + ID .)
    +               reduce using rule 23 (factor -> + ID .)
    -               reduce using rule 23 (factor -> + ID .)
    ;               reduce using rule 23 (factor -> + ID .)
    ,               reduce using rule 23 (factor -> + ID .)
    )               reduce using rule 23 (factor -> + ID .)


state 90

    (25) factor -> + cte .

    *               reduce using rule 25 (factor -> + cte .)
    /               reduce using rule 25 (factor -> + cte .)
    >               reduce using rule 25 (factor -> + cte .)
    <               reduce using rule 25 (factor -> + cte .)
    EQ              reduce using rule 25 (factor -> + cte .)
    GE              reduce using rule 25 (factor -> + cte .)
    LE              reduce using rule 25 (factor -> + cte .)
    NE              reduce using rule 25 (factor -> + cte .)
    +               reduce using rule 25 (factor -> + cte .)
    -               reduce using rule 25 (factor -> + cte .)
    ;               reduce using rule 25 (factor -> + cte .)
    ,               reduce using rule 25 (factor -> + cte .)
    )               reduce using rule 25 (factor -> + cte .)


state 91

    (32) termino -> termino * . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    factor                         shift and go to state 118
    cte                            shift and go to state 66

state 92

    (33) termino -> termino / . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    factor                         shift and go to state 119
    cte                            shift and go to state 66

state 93

    (24) factor -> - ID .

    *               reduce using rule 24 (factor -> - ID .)
    /               reduce using rule 24 (factor -> - ID .)
    >               reduce using rule 24 (factor -> - ID .)
    <               reduce using rule 24 (factor -> - ID .)
    EQ              reduce using rule 24 (factor -> - ID .)
    GE              reduce using rule 24 (factor -> - ID .)
    LE              reduce using rule 24 (factor -> - ID .)
    NE              reduce using rule 24 (factor -> - ID .)
    +               reduce using rule 24 (factor -> - ID .)
    -               reduce using rule 24 (factor -> - ID .)
    ;               reduce using rule 24 (factor -> - ID .)
    ,               reduce using rule 24 (factor -> - ID .)
    )               reduce using rule 24 (factor -> - ID .)


state 94

    (26) factor -> - cte .

    *               reduce using rule 26 (factor -> - cte .)
    /               reduce using rule 26 (factor -> - cte .)
    >               reduce using rule 26 (factor -> - cte .)
    <               reduce using rule 26 (factor -> - cte .)
    EQ              reduce using rule 26 (factor -> - cte .)
    GE              reduce using rule 26 (factor -> - cte .)
    LE              reduce using rule 26 (factor -> - cte .)
    NE              reduce using rule 26 (factor -> - cte .)
    +               reduce using rule 26 (factor -> - cte .)
    -               reduce using rule 26 (factor -> - cte .)
    ;               reduce using rule 26 (factor -> - cte .)
    ,               reduce using rule 26 (factor -> - cte .)
    )               reduce using rule 26 (factor -> - cte .)


state 95

    (20) factor -> ( expression . )

    )               shift and go to state 120


state 96

    (42) f_call -> ID ( expression f_call_ayuda . ) ;

    )               shift and go to state 121


state 97

    (44) f_call_ayuda -> , . expression f_call_ayuda
    (13) expression -> . exp > exp
    (14) expression -> . exp < exp
    (15) expression -> . exp EQ exp
    (16) expression -> . exp GE exp
    (17) expression -> . exp LE exp
    (18) expression -> . exp NE exp
    (19) expression -> . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    expression                     shift and go to state 122
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 98

    (45) f_call_ayuda -> empty .

    )               reduce using rule 45 (f_call_ayuda -> empty .)


state 99

    (43) f_call -> ID ( ) ; .

    }               reduce using rule 43 (f_call -> ID ( ) ; .)
    ID              reduce using rule 43 (f_call -> ID ( ) ; .)
    IF              reduce using rule 43 (f_call -> ID ( ) ; .)
    DO              reduce using rule 43 (f_call -> ID ( ) ; .)
    PRINT           reduce using rule 43 (f_call -> ID ( ) ; .)


state 100

    (36) condition -> IF ( expression ) . marcar_if_inicio body ;
    (38) condition -> IF ( expression ) . marcar_if_else_inicio body marcar_else_inicio ELSE body ;
    (37) marcar_if_inicio -> .
    (39) marcar_if_else_inicio -> .

  ! reduce/reduce conflict for { resolved using rule 37 (marcar_if_inicio -> .)
    {               reduce using rule 37 (marcar_if_inicio -> .)

  ! {               [ reduce using rule 39 (marcar_if_else_inicio -> .) ]

    marcar_if_inicio               shift and go to state 123
    marcar_if_else_inicio          shift and go to state 124

state 101

    (35) cycle -> DO body WHILE ( . expression ) ;
    (13) expression -> . exp > exp
    (14) expression -> . exp < exp
    (15) expression -> . exp EQ exp
    (16) expression -> . exp GE exp
    (17) expression -> . exp LE exp
    (18) expression -> . exp NE exp
    (19) expression -> . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    expression                     shift and go to state 125
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 102

    (27) print -> PRINT ( expression print_ayuda . ) ;

    )               shift and go to state 126


state 103

    (29) print_ayuda -> , . expression print_ayuda
    (30) print_ayuda -> , . STRING print_ayuda
    (13) expression -> . exp > exp
    (14) expression -> . exp < exp
    (15) expression -> . exp EQ exp
    (16) expression -> . exp GE exp
    (17) expression -> . exp LE exp
    (18) expression -> . exp NE exp
    (19) expression -> . exp
    (10) exp -> . exp + termino
    (11) exp -> . exp - termino
    (12) exp -> . termino
    (32) termino -> . termino * factor
    (33) termino -> . termino / factor
    (34) termino -> . factor
    (20) factor -> . ( expression )
    (21) factor -> . ID
    (22) factor -> . cte
    (23) factor -> . + ID
    (24) factor -> . - ID
    (25) factor -> . + cte
    (26) factor -> . - cte
    (54) cte -> . CONST_INT
    (55) cte -> . CONST_FLOAT

    STRING          shift and go to state 128
    (               shift and go to state 65
    ID              shift and go to state 58
    +               shift and go to state 61
    -               shift and go to state 63
    CONST_INT       shift and go to state 67
    CONST_FLOAT     shift and go to state 68

    expression                     shift and go to state 127
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    cte                            shift and go to state 66

state 104

    (31) print_ayuda -> empty .

    )               reduce using rule 31 (print_ayuda -> empty .)


state 105

    (28) print -> PRINT ( CONST_STRING print_ayuda . ) ;

    )               shift and go to state 129


state 106

    (56) func -> VOID ID ( ID : type funcs_ayuda ) . func_start [ vars body ] ;
    (58) func -> VOID ID ( ID : type funcs_ayuda ) . func_start [ body ] ;
    (60) func_start -> .

    [               reduce using rule 60 (func_start -> .)

    func_start                     shift and go to state 130

state 107

    (64) funcs_ayuda -> , ID . : type funcs_ayuda

    :               shift and go to state 131


state 108

    (57) func -> VOID ID ( ) func_start [ vars body . ] ;

    ]               shift and go to state 132


state 109

    (59) func -> VOID ID ( ) func_start [ body ] . ;

    ;               shift and go to state 133


state 110

    (13) expression -> exp > exp .
    (10) exp -> exp . + termino
    (11) exp -> exp . - termino

    ;               reduce using rule 13 (expression -> exp > exp .)
    ,               reduce using rule 13 (expression -> exp > exp .)
    )               reduce using rule 13 (expression -> exp > exp .)
    +               shift and go to state 87
    -               shift and go to state 88


state 111

    (14) expression -> exp < exp .
    (10) exp -> exp . + termino
    (11) exp -> exp . - termino

    ;               reduce using rule 14 (expression -> exp < exp .)
    ,               reduce using rule 14 (expression -> exp < exp .)
    )               reduce using rule 14 (expression -> exp < exp .)
    +               shift and go to state 87
    -               shift and go to state 88


state 112

    (15) expression -> exp EQ exp .
    (10) exp -> exp . + termino
    (11) exp -> exp . - termino

    ;               reduce using rule 15 (expression -> exp EQ exp .)
    ,               reduce using rule 15 (expression -> exp EQ exp .)
    )               reduce using rule 15 (expression -> exp EQ exp .)
    +               shift and go to state 87
    -               shift and go to state 88


state 113

    (16) expression -> exp GE exp .
    (10) exp -> exp . + termino
    (11) exp -> exp . - termino

    ;               reduce using rule 16 (expression -> exp GE exp .)
    ,               reduce using rule 16 (expression -> exp GE exp .)
    )               reduce using rule 16 (expression -> exp GE exp .)
    +               shift and go to state 87
    -               shift and go to state 88


state 114

    (17) expression -> exp LE exp .
    (10) exp -> exp . + termino
    (11) exp -> exp . - termino

    ;               reduce using rule 17 (expression -> exp LE exp .)
    ,               reduce using rule 17 (expression -> exp LE exp .)
    )               reduce using rule 17 (expression -> exp LE exp .)
    +               shift and go to state 87
    -               shift and go to state 88


state 115

    (18) expression -> exp NE exp .
    (10) exp -> exp . + termino
    (11) exp -> exp . - termino

    ;               reduce using rule 18 (expression -> exp NE exp .)
    ,               reduce using rule 18 (expression -> exp NE exp .)
    )               reduce using rule 18 (expression -> exp NE exp .)
    +               shift and go to state 87
    -               shift and go to state 88


state 116

    (10) exp -> exp + termino .
    (32) termino -> termino . * factor
    (33) termino -> termino . / factor

    >               reduce using rule 10 (exp -> exp + termino .)
    <               reduce using rule 10 (exp -> exp + termino .)
    EQ              reduce using rule 10 (exp -> exp + termino .)
    GE              reduce using rule 10 (exp -> exp + termino .)
    LE              reduce using rule 10 (exp -> exp + termino .)
    NE              reduce using rule 10 (exp -> exp + termino .)
    +               reduce using rule 10 (exp -> exp + termino .)
    -               reduce using rule 10 (exp -> exp + termino .)
    ;               reduce using rule 10 (exp -> exp + termino .)
    ,               reduce using rule 10 (exp -> exp + termino .)
    )               reduce using rule 10 (exp -> exp + termino .)
    *               shift and go to state 91
    /               shift and go to state 92


state 117

    (11) exp -> exp - termino .
    (32) termino -> termino . * factor
    (33) termino -> termino . / factor

    >               reduce using rule 11 (exp -> exp - termino .)
    <               reduce using rule 11 (exp -> exp - termino .)
    EQ              reduce using rule 11 (exp -> exp - termino .)
    GE              reduce using rule 11 (exp -> exp - termino .)
    LE              reduce using rule 11 (exp -> exp - termino .)
    NE              reduce using rule 11 (exp -> exp - termino .)
    +               reduce using rule 11 (exp -> exp - termino .)
    -               reduce using rule 11 (exp -> exp - termino .)
    ;               reduce using rule 11 (exp -> exp - termino .)
    ,               reduce using rule 11 (exp -> exp - termino .)
    )               reduce using rule 11 (exp -> exp - termino .)
    *               shift and go to state 91
    /               shift and go to state 92


state 118

    (32) termino -> termino * factor .

    *               reduce using rule 32 (termino -> termino * factor .)
    /               reduce using rule 32 (termino -> termino * factor .)
    >               reduce using rule 32 (termino -> termino * factor .)
    <               reduce using rule 32 (termino -> termino * factor .)
    EQ              reduce using rule 32 (termino -> termino * factor .)
    GE              reduce using rule 32 (termino -> termino * factor .)
    LE              reduce using rule 32 (termino -> termino * factor .)
    NE              reduce using rule 32 (termino -> termino * factor .)
    +               reduce using rule 32 (termino -> termino * factor .)
    -               reduce using rule 32 (termino -> termino * factor .)
    ;               reduce using rule 32 (termino -> termino * factor .)
    ,               reduce using rule 32 (termino -> termino * factor .)
    )               reduce using rule 32 (termino -> termino * factor .)


state 119

    (33) termino -> termino / factor .

    *               reduce using rule 33 (termino -> termino / factor .)
    /               reduce using rule 33 (termino -> termino / factor .)
    >               reduce using rule 33 (termino -> termino / factor .)
    <               reduce using rule 33 (termino -> termino / factor .)
    EQ              reduce using rule 33 (termino -> termino / factor .)
    GE              reduce using rule 33 (termino -> termino / factor .)
    LE              reduce using rule 33 (termino -> termino / factor .)
    NE              reduce using rule 33 (termino -> termino / factor .)
    +               reduce using rule 33 (termino -> termino / factor .)
    -               reduce using rule 33 (termino -> termino / factor .)
    ;               reduce using rule 33 (termino -> termino / factor .)
    ,               reduce using rule 33 (termino -> termino / factor .)
    )               reduce using rule 33 (termino -> termino / factor .)


state 120

    (20) factor -> ( expression ) .

    *               reduce using rule 20 (factor -> ( expression ) .)
    /               reduce using rule 20 (factor -> ( expression ) .)
    >               reduce using rule 20 (factor -> ( expression ) .)
    <               reduce using rule 20 (factor -> ( expression ) .)
    EQ              reduce using rule 20 (factor -> ( expression ) .)
    GE              reduce using rule 20 (factor -> ( expression ) .)
    LE              reduce using rule 20 (factor -> ( expression ) .)
    NE              reduce using rule 20 (factor -> ( expression ) .)
    +               reduce using rule 20 (factor -> ( expression ) .)
    -               reduce using rule 20 (factor -> ( expression ) .)
    ;               reduce using rule 20 (factor -> ( expression ) .)
    ,               reduce using rule 20 (factor -> ( expression ) .)
    )               reduce using rule 20 (factor -> ( expression ) .)


state 121

    (42) f_call -> ID ( expression f_call_ayuda ) . ;

    ;               shift and go to state 134


state 122

    (44) f_call_ayuda -> , expression . f_call_ayuda
    (44) f_call_ayuda -> . , expression f_call_ayuda
    (45) f_call_ayuda -> . empty
    (1) empty -> .

    ,               shift and go to state 97
    )               reduce using rule 1 (empty -> .)

    f_call_ayuda                   shift and go to state 135
    empty                          shift and go to state 98

state 123

    (36) condition -> IF ( expression ) marcar_if_inicio . body ;
    (53) body -> . { statements }

    {               shift and go to state 24

    body                           shift and go to state 136

state 124

    (38) condition -> IF ( expression ) marcar_if_else_inicio . body marcar_else_inicio ELSE body ;
    (53) body -> . { statements }

    {               shift and go to state 24

    body                           shift and go to state 137

state 125

    (35) cycle -> DO body WHILE ( expression . ) ;

    )               shift and go to state 138


state 126

    (27) print -> PRINT ( expression print_ayuda ) . ;

    ;               shift and go to state 139


state 127

    (29) print_ayuda -> , expression . print_ayuda
    (29) print_ayuda -> . , expression print_ayuda
    (30) print_ayuda -> . , STRING print_ayuda
    (31) print_ayuda -> . empty
    (1) empty -> .

    ,               shift and go to state 103
    )               reduce using rule 1 (empty -> .)

    print_ayuda                    shift and go to state 140
    empty                          shift and go to state 104

state 128

    (30) print_ayuda -> , STRING . print_ayuda
    (29) print_ayuda -> . , expression print_ayuda
    (30) print_ayuda -> . , STRING print_ayuda
    (31) print_ayuda -> . empty
    (1) empty -> .

    ,               shift and go to state 103
    )               reduce using rule 1 (empty -> .)

    print_ayuda                    shift and go to state 141
    empty                          shift and go to state 104

state 129

    (28) print -> PRINT ( CONST_STRING print_ayuda ) . ;

    ;               shift and go to state 142


state 130

    (56) func -> VOID ID ( ID : type funcs_ayuda ) func_start . [ vars body ] ;
    (58) func -> VOID ID ( ID : type funcs_ayuda ) func_start . [ body ] ;

    [               shift and go to state 143


state 131

    (64) funcs_ayuda -> , ID : . type funcs_ayuda
    (2) type -> . INT
    (3) type -> . FLOAT

    INT             shift and go to state 28
    FLOAT           shift and go to state 29

    type                           shift and go to state 144

state 132

    (57) func -> VOID ID ( ) func_start [ vars body ] . ;

    ;               shift and go to state 145


state 133

    (59) func -> VOID ID ( ) func_start [ body ] ; .

    MAIN            reduce using rule 59 (func -> VOID ID ( ) func_start [ body ] ; .)
    VOID            reduce using rule 59 (func -> VOID ID ( ) func_start [ body ] ; .)


state 134

    (42) f_call -> ID ( expression f_call_ayuda ) ; .

    }               reduce using rule 42 (f_call -> ID ( expression f_call_ayuda ) ; .)
    ID              reduce using rule 42 (f_call -> ID ( expression f_call_ayuda ) ; .)
    IF              reduce using rule 42 (f_call -> ID ( expression f_call_ayuda ) ; .)
    DO              reduce using rule 42 (f_call -> ID ( expression f_call_ayuda ) ; .)
    PRINT           reduce using rule 42 (f_call -> ID ( expression f_call_ayuda ) ; .)


state 135

    (44) f_call_ayuda -> , expression f_call_ayuda .

    )               reduce using rule 44 (f_call_ayuda -> , expression f_call_ayuda .)


state 136

    (36) condition -> IF ( expression ) marcar_if_inicio body . ;

    ;               shift and go to state 146


state 137

    (38) condition -> IF ( expression ) marcar_if_else_inicio body . marcar_else_inicio ELSE body ;
    (40) marcar_else_inicio -> .

    ELSE            reduce using rule 40 (marcar_else_inicio -> .)

    marcar_else_inicio             shift and go to state 147

state 138

    (35) cycle -> DO body WHILE ( expression ) . ;

    ;               shift and go to state 148


state 139

    (27) print -> PRINT ( expression print_ayuda ) ; .

    }               reduce using rule 27 (print -> PRINT ( expression print_ayuda ) ; .)
    ID              reduce using rule 27 (print -> PRINT ( expression print_ayuda ) ; .)
    IF              reduce using rule 27 (print -> PRINT ( expression print_ayuda ) ; .)
    DO              reduce using rule 27 (print -> PRINT ( expression print_ayuda ) ; .)
    PRINT           reduce using rule 27 (print -> PRINT ( expression print_ayuda ) ; .)


state 140

    (29) print_ayuda -> , expression print_ayuda .

    )               reduce using rule 29 (print_ayuda -> , expression print_ayuda .)


state 141

    (30) print_ayuda -> , STRING print_ayuda .

    )               reduce using rule 30 (print_ayuda -> , STRING print_ayuda .)


state 142

    (28) print -> PRINT ( CONST_STRING print_ayuda ) ; .

    }               reduce using rule 28 (print -> PRINT ( CONST_STRING print_ayuda ) ; .)
    ID              reduce using rule 28 (print -> PRINT ( CONST_STRING print_ayuda ) ; .)
    IF              reduce using rule 28 (print -> PRINT ( CONST_STRING print_ayuda ) ; .)
    DO              reduce using rule 28 (print -> PRINT ( CONST_STRING print_ayuda ) ; .)
    PRINT           reduce using rule 28 (print -> PRINT ( CONST_STRING print_ayuda ) ; .)


state 143

    (56) func -> VOID ID ( ID : type funcs_ayuda ) func_start [ . vars body ] ;
    (58) func -> VOID ID ( ID : type funcs_ayuda ) func_start [ . body ] ;
    (4) vars -> . VAR var_ayuda
    (53) body -> . { statements }

    VAR             shift and go to state 6
    {               shift and go to state 24

    vars                           shift and go to state 149
    body                           shift and go to state 150

state 144

    (64) funcs_ayuda -> , ID : type . funcs_ayuda
    (64) funcs_ayuda -> . , ID : type funcs_ayuda
    (65) funcs_ayuda -> . empty
    (1) empty -> .

    ,               shift and go to state 76
    )               reduce using rule 1 (empty -> .)

    funcs_ayuda                    shift and go to state 151
    empty                          shift and go to state 77

state 145

    (57) func -> VOID ID ( ) func_start [ vars body ] ; .

    MAIN            reduce using rule 57 (func -> VOID ID ( ) func_start [ vars body ] ; .)
    VOID            reduce using rule 57 (func -> VOID ID ( ) func_start [ vars body ] ; .)


state 146

    (36) condition -> IF ( expression ) marcar_if_inicio body ; .

    }               reduce using rule 36 (condition -> IF ( expression ) marcar_if_inicio body ; .)
    ID              reduce using rule 36 (condition -> IF ( expression ) marcar_if_inicio body ; .)
    IF              reduce using rule 36 (condition -> IF ( expression ) marcar_if_inicio body ; .)
    DO              reduce using rule 36 (condition -> IF ( expression ) marcar_if_inicio body ; .)
    PRINT           reduce using rule 36 (condition -> IF ( expression ) marcar_if_inicio body ; .)


state 147

    (38) condition -> IF ( expression ) marcar_if_else_inicio body marcar_else_inicio . ELSE body ;

    ELSE            shift and go to state 152


state 148

    (35) cycle -> DO body WHILE ( expression ) ; .

    }               reduce using rule 35 (cycle -> DO body WHILE ( expression ) ; .)
    ID              reduce using rule 35 (cycle -> DO body WHILE ( expression ) ; .)
    IF              reduce using rule 35 (cycle -> DO body WHILE ( expression ) ; .)
    DO              reduce using rule 35 (cycle -> DO body WHILE ( expression ) ; .)
    PRINT           reduce using rule 35 (cycle -> DO body WHILE ( expression ) ; .)


state 149

    (56) func -> VOID ID ( ID : type funcs_ayuda ) func_start [ vars . body ] ;
    (53) body -> . { statements }

    {               shift and go to state 24

    body                           shift and go to state 153

state 150

    (58) func -> VOID ID ( ID : type funcs_ayuda ) func_start [ body . ] ;

    ]               shift and go to state 154


state 151

    (64) funcs_ayuda -> , ID : type funcs_ayuda .

    )               reduce using rule 64 (funcs_ayuda -> , ID : type funcs_ayuda .)


state 152

    (38) condition -> IF ( expression ) marcar_if_else_inicio body marcar_else_inicio ELSE . body ;
    (53) body -> . { statements }

    {               shift and go to state 24

    body                           shift and go to state 155

state 153

    (56) func -> VOID ID ( ID : type funcs_ayuda ) func_start [ vars body . ] ;

    ]               shift and go to state 156


state 154

    (58) func -> VOID ID ( ID : type funcs_ayuda ) func_start [ body ] . ;

    ;               shift and go to state 157


state 155

    (38) condition -> IF ( expression ) marcar_if_else_inicio body marcar_else_inicio ELSE body . ;

    ;               shift and go to state 158


state 156

    (56) func -> VOID ID ( ID : type funcs_ayuda ) func_start [ vars body ] . ;

    ;               shift and go to state 159


state 157

    (58) func -> VOID ID ( ID : type funcs_ayuda ) func_start [ body ] ; .

    MAIN            reduce using rule 58 (func -> VOID ID ( ID : type funcs_ayuda ) func_start [ body ] ; .)
    VOID            reduce using rule 58 (func -> VOID ID ( ID : type funcs_ayuda ) func_start [ body ] ; .)


state 158

    (38) condition -> IF ( expression ) marcar_if_else_inicio body marcar_else_inicio ELSE body ; .

    }               reduce using rule 38 (condition -> IF ( expression ) marcar_if_else_inicio body marcar_else_inicio ELSE body ; .)
    ID              reduce using rule 38 (condition -> IF ( expression ) marcar_if_else_inicio body marcar_else_inicio ELSE body ; .)
    IF              reduce using rule 38 (condition -> IF ( expression ) marcar_if_else_inicio body marcar_else_inicio ELSE body ; .)
    DO              reduce using rule 38 (condition -> IF ( expression ) marcar_if_else_inicio body marcar_else_inicio ELSE body ; .)
    PRINT           reduce using rule 38 (condition -> IF ( expression ) marcar_if_else_inicio body marcar_else_inicio ELSE body ; .)


state 159

    (56) func -> VOID ID ( ID : type funcs_ayuda ) func_start [ vars body ] ; .

    MAIN            reduce using rule 56 (func -> VOID ID ( ID : type funcs_ayuda ) func_start [ vars body ] ; .)
    VOID            reduce using rule 56 (func -> VOID ID ( ID : type funcs_ayuda ) func_start [ vars body ] ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VOID in state 5 resolved as shift
WARNING: reduce/reduce conflict in state 100 resolved using rule (marcar_if_inicio -> <empty>)
WARNING: rejected rule (marcar_if_else_inicio -> <empty>) in state 100
WARNING: Rule (marcar_if_else_inicio -> <empty>) is never reduced
