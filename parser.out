Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     type -> INT
Rule 3     type -> FLOAT
Rule 4     type -> STRING
Rule 5     vars -> VAR var_ayuda
Rule 6     var_ayuda -> ID var_doble_ayuda : type ; var_ayuda_tail
Rule 7     var_ayuda_tail -> var_ayuda
Rule 8     var_ayuda_tail -> empty
Rule 9     var_doble_ayuda -> , ID var_doble_ayuda
Rule 10    var_doble_ayuda -> empty
Rule 11    exp -> exp + termino
Rule 12    exp -> exp - termino
Rule 13    exp -> termino
Rule 14    expression -> exp > exp
Rule 15    expression -> exp < exp
Rule 16    expression -> exp EQ exp
Rule 17    expression -> exp GE exp
Rule 18    expression -> exp LE exp
Rule 19    expression -> exp NE exp
Rule 20    expression -> exp
Rule 21    factor -> ( expression )
Rule 22    factor -> ID
Rule 23    factor -> cte
Rule 24    factor -> + ID
Rule 25    factor -> - ID
Rule 26    factor -> + cte
Rule 27    factor -> - cte
Rule 28    print -> PRINT ( expression print_ayuda ) ;
Rule 29    print -> PRINT ( CONST_STRING print_ayuda ) ;
Rule 30    print_ayuda -> , expression print_ayuda
Rule 31    print_ayuda -> , CONST_STRING print_ayuda
Rule 32    print_ayuda -> empty
Rule 33    termino -> termino * factor
Rule 34    termino -> termino / factor
Rule 35    termino -> factor
Rule 36    cycle -> DO marcar_cycle_inicio body marcar_cycle_final WHILE ( expression ) ;
Rule 37    marcar_cycle_final -> <empty>
Rule 38    condition -> IF ( expression ) marcar_if_inicio body ;
Rule 39    condition -> IF ( expression ) marcar_if_inicio body marcar_if_final ELSE marcar_else_inicio body ;
Rule 40    marcar_if_inicio -> <empty>
Rule 41    marcar_if_final -> <empty>
Rule 42    marcar_else_inicio -> <empty>
Rule 43    assign -> ID = expression ;
Rule 44    f_call -> ID ( expression f_call_ayuda ) ;
Rule 45    f_call -> ID ( ) ;
Rule 46    f_call_ayuda -> , expression f_call_ayuda
Rule 47    f_call_ayuda -> empty
Rule 48    statements -> statements statement
Rule 49    statements -> statement
Rule 50    statement -> assign
Rule 51    statement -> condition
Rule 52    statement -> cycle
Rule 53    statement -> f_call
Rule 54    statement -> print
Rule 55    body -> { statements }
Rule 56    cte -> CONST_INT
Rule 57    cte -> CONST_FLOAT
Rule 58    cte -> CONST_STRING
Rule 59    func -> VOID ID ( ID : type funcs_ayuda ) func_start [ vars body ] ;
Rule 60    func -> VOID ID ( ) func_start [ vars body ] ;
Rule 61    func -> VOID ID ( ID : type funcs_ayuda ) func_start [ body ] ;
Rule 62    func -> VOID ID ( ) func_start [ body ] ;
Rule 63    func_start -> <empty>
Rule 64    funcs_list -> funcs_list func
Rule 65    funcs_list -> func
Rule 66    funcs_list -> empty
Rule 67    funcs_ayuda -> , ID : type funcs_ayuda
Rule 68    funcs_ayuda -> empty
Rule 69    program -> PROGRAM ID ; vars funcs_list MAIN inicio_main body END
Rule 70    inicio_main -> <empty>

Terminals, with rules where they appear

(                    : 21 28 29 36 38 39 44 45 59 60 61 62
)                    : 21 28 29 36 38 39 44 45 59 60 61 62
*                    : 33
+                    : 11 24 26
,                    : 9 30 31 46 67
-                    : 12 25 27
/                    : 34
:                    : 6 59 61 67
;                    : 6 28 29 36 38 39 43 44 45 59 60 61 62 69
<                    : 15
=                    : 43
>                    : 14
CONST_FLOAT          : 57
CONST_INT            : 56
CONST_STRING         : 29 31 58
DO                   : 36
ELSE                 : 39
END                  : 69
EQ                   : 16
FLOAT                : 3
GE                   : 17
ID                   : 6 9 22 24 25 43 44 45 59 59 60 61 61 62 67 69
IF                   : 38 39
INT                  : 2
LE                   : 18
MAIN                 : 69
NE                   : 19
PRINT                : 28 29
PROGRAM              : 69
STRING               : 4
VAR                  : 5
VOID                 : 59 60 61 62
WHILE                : 36
[                    : 59 60 61 62
]                    : 59 60 61 62
error                : 
{                    : 55
}                    : 55

Nonterminals, with rules where they appear

assign               : 50
body                 : 36 38 39 39 59 60 61 62 69
condition            : 51
cte                  : 23 26 27
cycle                : 52
empty                : 8 10 32 47 66 68
exp                  : 11 12 14 14 15 15 16 16 17 17 18 18 19 19 20
expression           : 21 28 30 36 38 39 43 44 46
f_call               : 53
f_call_ayuda         : 44 46
factor               : 33 34 35
func                 : 64 65
func_start           : 59 60 61 62
funcs_ayuda          : 59 61 67
funcs_list           : 64 69
inicio_main          : 69
marcar_cycle_final   : 36
marcar_cycle_inicio  : 36
marcar_else_inicio   : 39
marcar_if_final      : 39
marcar_if_inicio     : 38 39
print                : 54
print_ayuda          : 28 29 30 31
program              : 0
statement            : 48 49
statements           : 48 55
termino              : 11 12 13 33 34
type                 : 6 59 61 67
var_ayuda            : 5 7
var_ayuda_tail       : 6
var_doble_ayuda      : 6 9
vars                 : 59 60 69

